<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RepoDb</name>
    </assembly>
    <members>
        <member name="T:RepoDb.Attributes.IdentityAttribute">
            <summary>
            An attribute used to define an identity property for the data entity object.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.IdentityAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.IdentityAttribute"/> class.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.TypeMapAttribute">
            <summary>
            An attribute used to define a mapping of data entity property type into its equivalent database type.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.TypeMapAttribute.#ctor(System.Data.DbType)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.TypeMapAttribute"/> class.
            </summary>
            <param name="dbType">A target database type.</param>
        </member>
        <member name="P:RepoDb.Attributes.TypeMapAttribute.DbType">
            <summary>
            Gets a database type that is currently mapped.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.MapAttribute">
            <summary>
            An attribute class used to define a mapping of the current class/property equivalent to an object/field name in the database.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.MapAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.MapAttribute"/> class.
            </summary>
            <param name="name">The name of the mapping that is equivalent to the database object/field.</param>
        </member>
        <member name="P:RepoDb.Attributes.MapAttribute.Name">
            <summary>
            Gets the name of the mapping that is equivalent to the database object/field.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.PrimaryAttribute">
            <summary>
            An attribute used to define a primary property for the data entity object.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.PrimaryAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.PrimaryAttribute"/> class.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.TextAttribute">
            <summary>
            An attribute used to define a text value on any object.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.TextAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.TextAttribute"/> class.
            </summary>
            <param name="text">A value of the text.</param>
        </member>
        <member name="P:RepoDb.Attributes.TextAttribute.Text">
            <summary>
            Gets a value of the text.
            </summary>
        </member>
        <member name="T:RepoDb.BulkInsertMapItem">
            <summary>
            A class used to define a mapping for the bulk insert operation.
            </summary>
        </member>
        <member name="M:RepoDb.BulkInsertMapItem.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BulkInsertMapItem"/> object.
            </summary>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="destinationColumn">The name of the destination column.</param>
        </member>
        <member name="P:RepoDb.BulkInsertMapItem.SourceColumn">
            <summary>
            Gets the name of the source column.
            </summary>
        </member>
        <member name="P:RepoDb.BulkInsertMapItem.DestinationColumn">
            <summary>
            Gets the name of the destination column.
            </summary>
        </member>
        <member name="T:RepoDb.CommandArrayParameter">
            <summary>
            A class used to handle the array value of the parameter.
            </summary>
        </member>
        <member name="M:RepoDb.CommandArrayParameter.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CommandArrayParameter"/> class.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="values">The values of the parameter.</param>
        </member>
        <member name="P:RepoDb.CommandArrayParameter.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.CommandArrayParameter.Values">
            <summary>
            Gets the values of the parameter.
            </summary>
        </member>
        <member name="T:RepoDb.CommandParameter">
            <summary>
            A class used to hold the definition of the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="M:RepoDb.CommandParameter.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CommandParameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="mappedToType">The parent type where this parameter is mapped.</param>
        </member>
        <member name="P:RepoDb.CommandParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.CommandParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.CommandParameter.MappedToType">
            <summary>
            The parent type where this parameter is mapped.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Execution.InsertAllExecutionContext`1">
            <summary>
            An execution context class used by insert-all operation.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.Command">
            <summary>
            The execution command text.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.Identity">
            <summary>
            The identity class property.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.InputFields">
            <summary>
            The list of the input <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.OutputFields">
            <summary>
            The list of the output <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.BatchSize">
            <summary>
            The batch size of the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.Execute">
            <summary>
            The actual compiled function.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Execution.InsertAllExecutionContextCache`1">
            <summary>
            A class used to cache the context of the insert-all executions.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="M:RepoDb.Contexts.Execution.InsertAllExecutionContextCache`1.Get(System.Int32,System.Func{System.Int32,RepoDb.Contexts.Execution.InsertAllExecutionContext{`0}})">
            <summary>
            Gets the cached execution context.
            </summary>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="callback">The callback function to be invoked.</param>
            <returns>The instance of the cached execution context.</returns>
        </member>
        <member name="T:RepoDb.DbHelperMapper">
            <summary>
            A class used to map a type of <see cref="T:System.Data.Common.DbConnection"/> into an instance of <see cref="T:RepoDb.Interfaces.IDbHelper"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Guard(System.Type)">
            <summary>
            Throws an exception if the type is not a sublcass of type <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Get``1">
            <summary>
            Gets an existing <see cref="T:RepoDb.Interfaces.IDbHelper"/> object that is mapped to type <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.Common.DbConnection"/>.</typeparam>
            <returns>An instance of mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/></returns>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Get(System.Type)">
            <summary>
            Gets an existing <see cref="T:RepoDb.Interfaces.IDbHelper"/> object that is mapped to type <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="type">The type of <see cref="T:System.Data.Common.DbConnection"/> object.</param>
            <returns>An instance of mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/></returns>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Add(System.Type,RepoDb.Interfaces.IDbHelper,System.Boolean)">
            <summary>
            Adds a mapping between the type of <see cref="T:System.Data.Common.DbConnection"/> and an instance of <see cref="T:RepoDb.Interfaces.IDbHelper"/> object.
            </summary>
            <param name="type">The type of <see cref="T:System.Data.Common.DbConnection"/> object.</param>
            <param name="dbHelper">The instance of database helper object to link to.</param>
            <param name="override">Set to true if to override the existing mapping, otherwise an exception will be thrown if the mapping is already present.</param>
        </member>
        <member name="T:RepoDb.Enumerations.ConversionType">
            <summary>
            An enum used to define the conversion logic when converting an instance of <see cref="T:System.Data.Common.DbDataReader"/> into a .NET CLR class.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConversionType.Default">
            <summary>
            The conversion is strict and there is no additional implied logic during the conversion of <see cref="T:System.Data.Common.DbDataReader"/> object into its
            destination .NET CLR type.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConversionType.Automatic">
            <summary>
            The data type conversion is not strict. An additional logic from <see cref="T:System.Convert"/> object will be used to properly map the <see cref="T:System.Data.Common.DbDataReader"/> data type
            into its destination .NET CLR type. The operation will only succeed if the data types are convertible.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.ConnectionPersistency">
            <summary>
            An enumeration that defines the persistency of the <see cref="T:System.Data.Common.DbConnection"/> object used by the repository.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConnectionPersistency.PerCall">
            <summary>
            A new connection is being created on every call of the repository operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConnectionPersistency.Instance">
            <summary>
            A single connection is being used until the lifetime of the repository.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Conjunction">
            <summary>
            An enumeration used to define a conjuction for the query grouping. This enumeration is used at <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Conjunction.And">
            <summary>
            The (AND) conjunction.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Conjunction.Or">
            <summary>
            The (OR) conjunction.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Order">
            <summary>
            An enumeration used to define the ordering of the query field.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Order.Ascending">
            <summary>
            The ascending order.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Order.Descending">
            <summary>
            The descending order.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Operation">
            <summary>
            An enumeration used to define an operation on the query expression.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Equal">
            <summary>
            An equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotEqual">
            <summary>
            A not-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.LessThan">
            <summary>
            A less-than operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.GreaterThan">
            <summary>
            A greater-than operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.LessThanOrEqual">
            <summary>
            A less-than-or-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.GreaterThanOrEqual">
            <summary>
            A greater-than-or-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Like">
            <summary>
            A like operation. Defines the (LIKE) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotLike">
            <summary>
            A not-like operation. Defines the (NOT LIKE) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Between">
            <summary>
            A between operation. Defines the (BETWEEN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotBetween">
            <summary>
            A not-between operation. Defines the (NOT BETWEEN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.In">
            <summary>
            An in operation. Defines the (IN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotIn">
            <summary>
            A non-in operation. Defines the (NOT IN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="T:RepoDb.ClassExpression">
            <summary>
            A class used for manipulating class objects via expressions.
            </summary>
        </member>
        <member name="M:RepoDb.ClassExpression.GetProperties``1">
            <summary>
            Gets the properties of the class.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <returns>The properties of the class.</returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetCompiledFunctionForGetProperties``1">
            <summary>
            Gets a function used to extract the properties of a class.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The properties of the class.</returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertiesAndValues``1(``0)">
            <summary>
            Extract the class properties and values and returns an enumerable of <see cref="T:RepoDb.PropertyValue"/> object.
            </summary>
            <typeparam name="TEntity">The target type of the class.</typeparam>
            <param name="obj">The object to be extracted.</param>
            <returns>A list of <see cref="T:RepoDb.PropertyValue"/> object with extracted values.</returns>
        </member>
        <member name="M:RepoDb.ClassExpression.Extract``1(``0)">
            <summary>
            Extract the class properties and values and returns an enumerable of <see cref="T:RepoDb.PropertyValue"/> object.
            </summary>
            <typeparam name="TEntity">The target type of the class.</typeparam>
            <param name="obj">The object to be extracted.</param>
            <returns>A list of <see cref="T:RepoDb.PropertyValue"/> object with extracted values.</returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetCompiledFunctionForClassPropertiesValuesExtractor``1(System.Collections.Generic.IEnumerable{RepoDb.ClassProperty})">
            <summary>
            Gets a function that returns the list of property values of the class.
            </summary>
            <param name="properties">The list of properties.</param>
            <returns>The enumerable value of class property values.</returns>
        </member>
        <member name="T:RepoDb.ClassMappedNameCache">
            <summary>
            A class used to cache the mapped-name for the entity.
            </summary>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.Get``1">
            <summary>
            Gets the cached mapped-name for the entity.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <returns>The cached mapped name of the entity.</returns>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.Get``1(System.Boolean)">
            <summary>
            Gets the cached mapped-name for the entity.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <param name="quoted">True whether the string is quoted.</param>
            <returns>The cached mapped name of the entity.</returns>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.Get(System.Type,System.Boolean)">
            <summary>
            Gets the cached mapped-name for the entity.
            </summary>
            <param name="type">The type of the target entity.</param>
            <param name="quoted">True whether the string is quoted.</param>
            <returns>The cached mapped name of the entity.</returns>
        </member>
        <member name="T:RepoDb.ClassProperty">
            <summary>
            A class that wraps the property object.
            </summary>
        </member>
        <member name="M:RepoDb.ClassProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <param name="property">The wrapped property.</param>
        </member>
        <member name="P:RepoDb.ClassProperty.PropertyInfo">
            <summary>
            Gets the wrapped property of this object.
            </summary>
        </member>
        <member name="M:RepoDb.ClassProperty.AsField">
            <summary>
            Convert the <see cref="T:RepoDb.ClassProperty"/> into a <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <returns>An instance of <see cref="T:System.String"/> object.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetPrimaryAttribute">
            <summary>
            Gets the primary attribute if present.
            </summary>
            <returns>The primary attribute if present.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetIdentityAttribute">
            <summary>
            Gets the identity attribute if present.
            </summary>
            <returns>The identity attribute if present.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.IsPrimary">
            <summary>
            Gets a value whether the current property is a primary property.
            </summary>
            <returns>True if the current property is a primary.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.IsIdentity">
            <summary>
            Gets a value whether the current property is an identity or not.
            </summary>
            <returns>True if the current property is an identity.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetDbType">
            <summary>
            Gets the mapped <see cref="T:System.Data.DbType"/> for the current property.
            </summary>
            <returns>The mapped <see cref="T:System.Data.DbType"/> value.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetQuotedMappedName">
            <summary>
            Gets the quoted mapped-name for the current property.
            </summary>
            <returns>The quoted mapped-name value.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetUnquotedMappedName">
            <summary>
            Gets the unquoted mapped-name for the current property.
            </summary>
            <returns>The unquoted mapped-name value.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.ToString">
            <summary>
            Returns the string that represent the current <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <returns>The unquoted name.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetHashCode">
            <summary>
            Returns the hashcode of the <see cref="P:RepoDb.ClassProperty.PropertyInfo"/> object of this instance.
            </summary>
            <returns>The hash code value.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.Equals(System.Object)">
            <summary>
            Compare the current instance to the other object instance.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns>True if the two instance is the same.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.Equals(RepoDb.ClassProperty)">
            <summary>
            Compare the current instance to the other object instance.
            </summary>
            <param name="other">The object to be compared.</param>
            <returns>True if the two instance is the same.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.op_Equality(RepoDb.ClassProperty,RepoDb.ClassProperty)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.op_Inequality(RepoDb.ClassProperty,RepoDb.ClassProperty)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.DataReaderFieldDefinition">
            <summary>
            A class used to handle the field definition of the data reader.
            </summary>
        </member>
        <member name="P:RepoDb.DataReaderFieldDefinition.Name">
            <summary>
            Gets or sets the handled column name value.
            </summary>
        </member>
        <member name="P:RepoDb.DataReaderFieldDefinition.Ordinal">
            <summary>
            Gets or sets the handled column ordinal value.
            </summary>
        </member>
        <member name="P:RepoDb.DataReaderFieldDefinition.Type">
            <summary>
            Gets or sets the handled column type value.
            </summary>
        </member>
        <member name="T:RepoDb.Exceptions.InvalidQualiferFieldsException">
            <summary>
            An exception that is being thrown if the qualifier fields passed in the operation are not valid.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.InvalidQualiferFieldsException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.InvalidQualiferFieldsException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.ParameterNotFoundException">
            <summary>
            An exception that is being thrown when the parameter object is not found.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.ParameterNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.ParameterNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.NoMatchedFieldsException">
            <summary>
            An exception that is being thrown when the operation extraction of the <see cref="T:System.Data.Common.DbDataReader"/> into data entity object 
            does not matched atleast one of the field from the result set.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.NoMatchedFieldsException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.NoMatchedFieldsException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.InvalidQueryExpressionException">
            <summary>
            An exception that is being thrown when the query expression passed is not valid.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.InvalidQueryExpressionException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.InvalidQueryExpressionException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.PrimaryFieldNotFoundException">
            <summary>
            An exception that is being thrown of the validation for primary key has been called and the primary key is not
            found from the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.PrimaryFieldNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.PrimaryFieldNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.CancelledExecutionException">
            <summary>
            An exception that is being thrown when the operation has been cancelled during the tracing.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.CancelledExecutionException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.CancelledExecutionException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.DuplicateTypeMapException">
            <summary>
            An exception that is being thrown if the duplicate type mapping is found.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.DuplicateTypeMapException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.DuplicateTypeMapException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Extensions.DbFieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.Field"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DbFieldExtension.AsEnumerable(RepoDb.DbField)">
            <summary>
            Converts an instance of a <see cref="T:RepoDb.DbField"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RepoDb.DbField"/> object.
            </summary>
            <param name="dbField">The <see cref="T:RepoDb.DbField"/> to be converted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbFieldExtension.AsField(RepoDb.DbField)">
            <summary>
            Converts an instance of a <see cref="T:RepoDb.DbField"/> into <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="dbField">The <see cref="T:RepoDb.DbField"/> to be converted.</param>
            <returns>An instance of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbFieldExtension.AsFields(System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            Converts the list of <see cref="T:RepoDb.DbField"/> objects into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="dbFields">The <see cref="T:RepoDb.DbField"/> to be converted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.EnumerableExtension">
            <summary>
            An extension class for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the enumerable into multiple enumerables.
            </summary>
            <typeparam name="T">The target dynamic type of the enumerable.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <param name="sizePerSplit">The sizes of the items per split.</param>
            <returns>An enumerable of enumerables.</returns>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> object into a <see cref="T:System.Collections.Generic.IList`1"/> of objects.
            </summary>
            <typeparam name="T">The target dynamic type of the enumerable.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <returns>The converted <see cref="T:System.Collections.Generic.IList`1"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> object into an array of objects.
            </summary>
            <typeparam name="T">The target dynamic type of the enumerable.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <returns>The converted <see cref="T:System.Collections.Generic.IList`1"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ExpressionExtension">
            Though we know that throwing an exception in the extension is not advisable, but I tend to do it to ensure that the
            parsing of the Linq expressions are properly handled. Please be guided about this extension that it somehow throws
            and exception at some scenarios.
            <summary>
            Contains the extension methods for <see cref="T:System.Linq.Expressions.Expression"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsExtractable(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> can be extracted as <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression can be extracted as <see cref="T:RepoDb.QueryField"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsGroupable(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> can be grouped as <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression can be grouped as <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsMathematical(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is using the <see cref="T:System.Math"/> object operations.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is using the <see cref="T:System.Math"/> object operations.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets the name of the <see cref="T:System.Reflection.MemberInfo"/> defines on the current instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> to be checked.</param>
            <returns>The name of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Gets the name of the operand defines on the current instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> to be checked.</param>
            <returns>The name of the operand.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets the name of the operand defines on the current instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> to be checked.</param>
            <returns>The name of the operand.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the name of the <see cref="T:System.Reflection.MemberInfo"/> defines on the current instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> to be checked.</param>
            <returns>The name of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.Expression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.Expression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.ConstantExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.ConstantExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.ConstantExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MemberExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.NewExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.NewExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.NewExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.NewExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.ParameterExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.ParameterExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.ParameterExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.DefaultExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.DefaultExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.DefaultExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsLambda(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToLambda(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.LambdaExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.LambdaExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsBinary(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.BinaryExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToBinary(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsConstant(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.ConstantExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToConstant(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.ConstantExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.ConstantExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsUnary(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.UnaryExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToUnary(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsMethodCall(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToMethodCall(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsMember(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToMember(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsNewArray(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToNewArray(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsNew(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.NewExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToNew(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.NewExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.NewExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsMemberInit(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToMemberInit(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsConditional(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToConditional(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsParameter(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.ParameterExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.ParameterExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToParameter(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.ParameterExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.ParameterExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsDefault(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is a <see cref="T:System.Linq.Expressions.DefaultExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.DefaultExpression"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToDefault(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.DefaultExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.DefaultExpression"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.MemberBindingExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Linq.Expressions.MemberBinding"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.MemberBindingExtension.GetValue(System.Linq.Expressions.MemberBinding)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MemberBinding"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberBindingExtension.IsMemberAssignment(System.Linq.Expressions.MemberBinding)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> is a <see cref="T:System.Linq.Expressions.MemberAssignment"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberBindingExtension.ToMemberAssignment(System.Linq.Expressions.MemberBinding)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.MemberBinding"/> object into <see cref="T:System.Linq.Expressions.MemberAssignment"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.MemberAssignment"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ClassPropertyExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.ClassProperty"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ClassPropertyExtension.AsFields(System.Collections.Generic.IEnumerable{RepoDb.ClassProperty})">
            <summary>
            Converts the list of <see cref="T:RepoDb.ClassProperty"/> into a a list of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="properties">The current instance of <see cref="T:RepoDb.ClassProperty"/>.</param>
            <returns>A list of <see cref="T:System.String"/> objects.</returns>
        </member>
        <member name="T:RepoDb.Extensions.TypeExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.AsFields(System.Type)">
            <summary>
            Converts all properties of the type into an array of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="type">The current type.</param>
            <returns>A list of <see cref="T:System.String"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetUnderlyingType(System.Type)">
            <summary>
            Gets the underlying type of the current type. If there is no underlying type, this will return the current type.
            </summary>
            <param name="type">The current type to check.</param>
            <returns>The underlying type or the current type.</returns>
        </member>
        <member name="T:RepoDb.Extensions.MemberInfoExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.GetMappedName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the current instance of <see cref="T:System.Reflection.MemberInfo"/>. If the instance is <see cref="T:System.Reflection.PropertyInfo"/>, it will try to retrieved the
            mapped name of the property.
            </summary>
            <param name="member">The member where to retrieve a name.</param>
            <returns>The name of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.GetValue(System.Reflection.MemberInfo,System.Object,System.Object[])">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Reflection.MemberInfo"/> object where the value is to be extracted.</param>
            <param name="obj">The object whose member value will be returned.</param>
            <param name="parameters">The argument list of parameters if needed.</param>
            <returns>The extracted value from <see cref="T:System.Reflection.MemberInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value of an object member based on the retrieved value from the instance of <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Reflection.MemberInfo"/> object where the value is to be retrieved.</param>
            <param name="obj">The object whose member value will be set.</param>
            <param name="value">The target value of the member.</param>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.IsFieldInfo(System.Reflection.MemberInfo)">
            <summary>
            Identify whether the current instance of <see cref="T:System.Reflection.MemberInfo"/> is a <see cref="T:System.Reflection.FieldInfo"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Reflection.MemberInfo"/> to be checked.</param>
            <returns>True if the instance of <see cref="T:System.Reflection.MemberInfo"/> is a <see cref="T:System.Reflection.FieldInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.ToFieldInfo(System.Reflection.MemberInfo)">
            <summary>
            Converts the current instance of <see cref="T:System.Reflection.MemberInfo"/> object into <see cref="T:System.Reflection.FieldInfo"/> object.
            </summary>
            <param name="member">The instance of the <see cref="T:System.Reflection.MemberInfo"/> object.</param>
            <returns>A converted instance of <see cref="T:System.Reflection.FieldInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.IsPropertyInfo(System.Reflection.MemberInfo)">
            <summary>
            Identify whether the current instance of <see cref="T:System.Reflection.MemberInfo"/> is a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Reflection.MemberInfo"/> to be checked.</param>
            <returns>True if the instance of <see cref="T:System.Reflection.MemberInfo"/> is a <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.ToPropertyInfo(System.Reflection.MemberInfo)">
            <summary>
            Converts the current instance of <see cref="T:System.Reflection.MemberInfo"/> object into <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="member">The instance of the <see cref="T:System.Reflection.MemberInfo"/> object.</param>
            <returns>A converted instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.IsMethodInfo(System.Reflection.MemberInfo)">
            <summary>
            Identify whether the current instance of <see cref="T:System.Reflection.MemberInfo"/> is a <see cref="T:System.Reflection.MethodInfo"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Reflection.MemberInfo"/> to be checked.</param>
            <returns>True if the instance of <see cref="T:System.Reflection.MemberInfo"/> is a <see cref="T:System.Reflection.MethodInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.ToMethodInfo(System.Reflection.MemberInfo)">
            <summary>
            Converts the current instance of <see cref="T:System.Reflection.MemberInfo"/> object into <see cref="T:System.Reflection.MethodInfo"/> object.
            </summary>
            <param name="member">The instance of the <see cref="T:System.Reflection.MemberInfo"/> object.</param>
            <returns>A converted instance of <see cref="T:System.Reflection.MethodInfo"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ArrayExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Array"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ArrayExtension.AsEnumerable(System.Array)">
            <summary>
            Converts an <see cref="T:System.Array"/> object into an enumerable of objects.
            </summary>
            <param name="array">The array to be converted.</param>
            <returns>An enumerable of objects.</returns>
        </member>
        <member name="T:RepoDb.Extensions.OrderFieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.OrderField"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsEnumerable(RepoDb.OrderField)">
            <summary>
            Converts an instance of order field into an enumerable list of order fields.
            </summary>
            <param name="orderField">The order field instance to be converted.</param>
            <returns>An enumerable list of order fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsField(RepoDb.OrderField)">
            <summary>
            Converts an instance of order field into an enumerable list of fields.
            </summary>
            <param name="orderField">The order field instance to be converted.</param>
            <returns>An enumerable list of fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsAliasField(RepoDb.OrderField,System.String)">
            <summary>
            Converts an instance of order field into an stringified alias-formatted string.
            </summary>
            <param name="orderField">The order field to be converted.</param>
            <param name="alias">The alias to be used for conversion.</param>
            <returns>A string value for the stringified alias-formatted converted string.</returns>
        </member>
        <member name="T:RepoDb.Extensions.FieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.Field"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsEnumerable(RepoDb.Field)">
            <summary>
            Converts an instance of a <see cref="T:RepoDb.Field"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="field">The <see cref="T:RepoDb.Field"/> to be converted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.DataEntityExtension">
            <summary>
            Contains the extension methods for data entity object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.ValueToPrimaryType``1(System.Object)">
            <summary>
            Converts the value to the type of the primary property of the target data entity.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="value">The value to be converted.</param>
            <returns>The converted value to primary property type.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetProperties``1">
            <summary>
            Gets the list of <see cref="T:System.Reflection.PropertyInfo"/> objects from the data entity class.
            </summary>
            <typeparam name="TEntity">The type of the data entity where to get the list of the properties.</typeparam>
            <returns>The properties of the class.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetMappedName``1(System.Boolean)">
            <summary>
            Gets the mapped name of a data entity. It will return the value of <see cref="P:RepoDb.Attributes.MapAttribute.Name"/> property. If the
            <see cref="T:RepoDb.Attributes.MapAttribute"/> is not defined, then this will return the name of the class.
            </summary>
            <typeparam name="TEntity">The type of the data entity where to get the mapped name.</typeparam>
            <param name="quoted">True whether the string is quoted.</param>
            <returns>A mapped name for the data entity.</returns>
        </member>
        <member name="T:RepoDb.Extensions.DataReaderExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDataReader"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DataReaderExtension.AsEnumerable``1(System.Data.IDataReader)">
            <summary>
            Converts the <see cref="T:System.Data.IDataReader"/> object into an enumerable list of data entity objects.
            </summary>
            <typeparam name="TEntity">The target type of the data entity.</typeparam>
            <param name="reader">The data reader object to be converted.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataReaderExtension.AsEnumerable(System.Data.IDataReader)">
            <summary>
            Converts the <see cref="T:System.Data.IDataReader"/> object into an enumerable list of dynamic objects containing the schema of the reader.
            </summary>
            <param name="reader">The data reader object to be converted.</param>
            <returns>An enumerable list of dynamic objects containing the schema of the reader.</returns>
        </member>
        <member name="T:RepoDb.Extensions.DbCommandExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbCommand"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParametersFromClassProperties(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{RepoDb.ClassProperty},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the command object list of parameters based on type.
            </summary>
            <param name="command">The command object instance to be used.</param>
            <param name="properties">The target list of properties.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameter(System.Data.IDbCommand,System.String,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Creates a parameter for a command object.
            </summary>
            <param name="command">The command object instance to be used.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The database type of the parameter.</param>
            <returns>An instance of the newly created parameter object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParametersFromArray(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{RepoDb.CommandArrayParameter})">
            <summary>
            Creates a parameter for a command object.
            </summary>
            <param name="command">The command object instance to be used.</param>
            <param name="commandArrayParameters">The list of <see cref="T:RepoDb.CommandArrayParameter"/> to be used for replacement.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Object)">
            <summary>
            Creates a parameter from object by mapping the property from the target entity type.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="param">The object to be used when creating the parameters.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a parameter from object by mapping the property from the target entity type.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="param">The object to be used when creating the parameters.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create the command parameters from the <see cref="T:System.Collections.Generic.IDictionary`2"/> object.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="dictionary">The parameters from the <see cref="T:System.Collections.Generic.Dictionary`2"/> object.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create the command parameters from the <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="queryGroup">The value of the <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create the command parameters from the list of <see cref="T:RepoDb.QueryField"/> objects.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="queryFields">The list of <see cref="T:RepoDb.QueryField"/> objects.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,RepoDb.QueryField,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a command parameter from the <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="queryField">The value of <see cref="T:RepoDb.QueryField"/> object.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.SetParameter(System.Data.IDbCommand,System.String,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Set the <see cref="T:System.Data.IDbCommand"/> exist <see cref="T:System.Data.IDbDataParameter"/> object value and type.
            </summary>
            <param name="command">The command object instance to be used.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The database type of the parameter.</param>
            <returns>The instance of updated parameter.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.SetParameters(System.Data.IDbCommand,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Set the <see cref="T:System.Data.IDbCommand"/> object existing <see cref="T:System.Data.IDbDataParameter"/> values.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="param">The instance of where the parameter values will be set.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
            <param name="resetOthers">True to reset the other parameter object. This will ignore the skipped properties.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.SetParameters(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create the command parameters from the <see cref="T:System.Collections.Generic.IDictionary`2"/> object.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="dictionary">The parameters from the <see cref="T:System.Collections.Generic.Dictionary`2"/> object.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
            <param name="resetOthers">True to reset the other parameter object. This will ignore the skipped properties.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.SetParameters(System.Data.IDbCommand,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create the command parameters from the <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="queryGroup">The value of the <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
            <param name="resetOthers">True to reset the other parameter object. This will ignore the skipped properties.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.SetParameters(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create the command parameters from the list of <see cref="T:RepoDb.QueryField"/> objects.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="queryFields">The list of <see cref="T:RepoDb.QueryField"/> objects.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
            <param name="resetOthers">True to reset the other parameter object. This will ignore the skipped properties.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.SetParameters(System.Data.IDbCommand,RepoDb.QueryField,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a command parameter from the <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="queryField">The value of <see cref="T:RepoDb.QueryField"/> object.</param>
            <param name="propertiesToSkip">The list of the properties to be skpped.</param>
            <param name="resetOthers">True to reset the other parameter object. This will ignore the skipped properties.</param>
        </member>
        <member name="T:RepoDb.Extensions.ObjectExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.Merge``1(``0,RepoDb.QueryGroup)">
            <summary>
            Merges an object into an instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <typeparam name="TEntity">The type of the object.</typeparam>
            <param name="obj">The object to be merged.</param>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to be merged.</param>
            <returns>An instance of converted dynamic object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.Merge(System.Object,RepoDb.QueryGroup)">
            <summary>
            Merge the <see cref="T:RepoDb.QueryGroup"/> object into the current object.
            </summary>
            <param name="obj">The object where the <see cref="T:RepoDb.QueryGroup"/> object will be merged.</param>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to merged.</param>
            <returns>A dynamic object with the merged fields from <see cref="T:RepoDb.QueryGroup"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.Merge(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},RepoDb.QueryGroup)">
            <summary>
            Merge the <see cref="T:RepoDb.QueryGroup"/> object into the current object.
            </summary>
            <param name="obj">The object where the <see cref="T:RepoDb.QueryGroup"/> object will be merged.</param>
            <param name="properties">The list of <see cref="T:System.Reflection.PropertyInfo"/> objects.</param>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to merged.</param>
            <returns>The object instance itself with the merged values.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsObject(System.Object)">
            <summary>
            Converts the data entity object into a dynamic object.
            </summary>
            <param name="obj">The object to be converted.</param>
            <returns>An instance of converted dynamic object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsQueryFields(System.Object)">
            <summary>
            Converts an instance of an object into an enumerable list of query fields.
            </summary>
            <param name="obj">The instance of the object to be converted.</param>
            <returns>An enumerable list of query fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsFields``1(``0)">
            <summary>
            Converts an instance of an object into an enumerable list of field.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="entity">The instance to be converted.</param>
            <returns>An enumerable list of fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsFields(System.Object)">
            <summary>
            Converts an instance of an object into an enumerable list of field.
            </summary>
            <param name="obj">The object to be converted.</param>
            <returns>An enumerable list of fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsOrderFields(System.Object)">
            <summary>
            Converts an instance of an object into an enumerable list of order fields.
            </summary>
            <param name="obj">The object to be converted.</param>
            <returns>An enumerable list of order fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.Coalesce(System.Object,System.Object[])">
            <summary>
            Returns the first non-null occurence.
            </summary>
            <param name="obj">The current object.</param>
            <param name="parameters">The list of parameters.</param>
            <returns>The first non-null object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.Coalesce``1(System.Object,``0[])">
            <summary>
            Returns the first non-defaulted occurence.
            </summary>
            <typeparam name="T">The target type of the object.</typeparam>
            <param name="obj">The current object.</param>
            <param name="parameters">The list of parameters.</param>
            <returns>The first non-defaulted object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.ToNumber(System.Object)">
            <summary>
            Converts an object to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>A <see cref="T:System.Int64"/> value of the object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.PropertyInfoExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets a value of the property.
            </summary>
            <param name="property">The property where to get the value of the object.</param>
            <param name="obj">The object that contains the defined property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.SetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Sets a value of the property.
            </summary>
            <param name="property">The property where to set the value of the object.</param>
            <param name="obj">The object that contains the defined property.</param>
            <param name="value">The value to be set for the property.</param>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetCustomAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets a custom attribute defined on the property.
            </summary>
            <typeparam name="T">The custom attribute that is defined into the property.</typeparam>
            <param name="property">The type of where the custom attribute is defined.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetCustomAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets a custom attribute defined on the property.
            </summary>
            <param name="property">The type of where the custom attribute is defined.</param>
            <param name="type">The custom attribute that is defined into the property.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsEnumerable(System.Reflection.PropertyInfo)">
            <summary>
            Converts an instance of property info into an enumerable list of property info.
            </summary>
            <param name="property">The property info instance to be converted.</param>
            <returns>An enumerable list of property info.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetMappedName(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the mapped name of the propery.
            </summary>
            <param name="property">The property where the mapped name will be retrieved.</param>
            <param name="quoted">True whether the string is quoted.</param>
            <returns>A string containing the mapped name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.IsPrimary(System.Reflection.PropertyInfo)">
            <summary>
            Checks whether the property info is a primary property.
            </summary>
            <param name="property">The instance of property info to be checked.</param>
            <returns>A boolean value that holds a value whether the property info is a primary property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsQueryField(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Converts a property info into a query field object.
            </summary>
            <param name="property">The instance of property info to be converted.</param>
            <param name="entity">The entity object where the value of the property will be retrieved.</param>
            <returns>An instance of query field object that holds the converted name and values of the property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsQueryField(System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Converts a property info into a query field object.
            </summary>
            <param name="property">The instance of property info to be converted.</param>
            <param name="entity">The entity object where the value of the property will be retrieved.</param>
            <returns>An instance of query field object that holds the converted name and values of the property.</returns>
            <param name="appendUnderscore">
            The value to identify whether the underscope prefix will be appended to the parameter name.
            </param>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsField(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Converts a property info into a mapped name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="quoted">True whether the string is quoted.</param>
            <returns>A instance of string containing the value of a mapped name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameter(System.Reflection.PropertyInfo)">
            <summary>
            Converts a property info into a paramertized name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <returns>A instance of string containing the value of a parameterized name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameterAsField(System.Reflection.PropertyInfo)">
            <summary>
            Converts a property info into a paramertized (as field) name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <returns>A instance of string containing the value of a parameterized (as field) name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldAndParameter(System.Reflection.PropertyInfo)">
            <summary>
            Converts a property info into a field and parameter name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <returns>A instance of string containing the value of a field and parameter name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldAndAliasField(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Converts a property info into a field (and its alias) name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="alias">The alias to be used.</param>
            <returns>A instance of string containing the value of a field (and its alias) name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFields(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as field).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as field).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameters(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as parameters).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as parameters).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParametersAsFields(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as parameters as fields).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as parameters as fields).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldsAndParameters(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as field and parameters).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as field and parameters).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldsAndAliasFields(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String)">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as field and its alias).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <param name="alias">The alias to be used.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as field and its alias).</returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryFieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.QueryField"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsEnumerable(RepoDb.QueryField)">
            <summary>
            Converts an instance of a query field into an enumerable list of query fields.
            </summary>
            <param name="queryField">The query field to be converted.</param>
            <returns>An enumerable list of query fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.ResetAll(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
            <summary>
            Resets all the instances of <see cref="T:RepoDb.QueryField"/>.
            </summary>
            <param name="queryFields">The list of <see cref="T:RepoDb.QueryField"/> objects.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryGroupExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryGroupExtension.AsEnumerable(RepoDb.QueryGroup)">
            <summary>
            Convert an instance of query group into an enumerable list of query groups.
            </summary>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to be converted.</param>
            <returns>An enumerable list of query groups.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryGroupExtension.MapTo``1(RepoDb.QueryGroup)">
            <summary>
            Maps the current <see cref="T:RepoDb.QueryGroup"/> object to a type.
            </summary> 
            <typeparam name="TEntity">The target type where the current <see cref="T:RepoDb.QueryGroup"/> is to be mapped.</typeparam>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to be mapped.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroupTypeMap"/> object that holds the mapping.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryGroupExtension.MapTo(RepoDb.QueryGroup,System.Type)">
            <summary>
            Maps the current <see cref="T:RepoDb.QueryGroup"/> object to a type.
            </summary>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to be mapped.</param>
            <param name="type">The target type where the current <see cref="T:RepoDb.QueryGroup"/> is to be mapped.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroupTypeMap"/> object that holds the mapping.</returns>
        </member>
        <member name="T:RepoDb.Extensions.StringExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins an array string with a given separator.
            </summary>
            <param name="strings">The enumerable list of strings.</param>
            <param name="separator">The separator to be used.</param>
            <returns>A joined string from a given array of strings separated by the defined separator.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsUnquoted(System.String,System.Boolean)">
            <summary>
            Removes the database quotes from the string.
            </summary>
            <param name="value">The string value where the database quotes will be removed.</param>
            <param name="trim">The boolean value that indicates whether to trim the string before unquoting.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuoted(System.String,System.Boolean)">
            <summary>
            Adds a quotes to the string.
            </summary>
            <param name="value">The string value where the database quotes will be added.</param>
            <param name="trim">The boolean value that indicates whether to trim the string before quoting.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuoted(System.String)">
            <summary>
            Adds a quotes to the string.
            </summary>
            <param name="value">The string value where the database quotes will be added.</param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`2">
            <summary>
            An interfaced used to mark a class to become a conversion resolver.
            </summary>
            <typeparamref name="TInput">The type of the input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`2.Resolve(`0)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IDbHelper">
            <summary>
            An interface used to be a helper class on some database related activity.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.IDbHelper.GetFields(System.String,System.String)">
            <summary>
            Gets the list of <see cref="T:RepoDb.DbField"/> of the table.
            </summary>
            <param name="connectionString">The connection string to connect to.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A list of <see cref="T:RepoDb.DbField"/> of the target table.</returns>
        </member>
        <member name="P:RepoDb.Interfaces.IDbHelper.DbTypeResolver">
            <summary>
            Gets the type resolver used by this <see cref="T:RepoDb.Interfaces.IDbHelper"/> instance.
            </summary>
        </member>
        <member name="T:RepoDb.Interfaces.IStatementBuilder">
            <summary>
            An interface used to mark a class to be a statement builder. The statement builder is an object being mapped or injected into the
            repositories to be used for composing the SQL Statements. Implement this interface if the caller would likely to support the different
            statement building approach, or by supporting the other data providers like Oracle, OleDb, MySql, etc.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateBatchQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for batch query operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to query.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for batch query operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateCount(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for count operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for count operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateCountAll(RepoDb.QueryBuilder,System.String,System.String)">
            <summary>
            Creates a SQL Statement for count-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for count-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateDelete(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for delete operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <returns>A sql statement for delete operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateDeleteAll(RepoDb.QueryBuilder,System.String)">
            <summary>
            Creates a SQL Statement for delete-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A sql statement for delete-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInsert(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for insert operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="primaryField">The primary field from the database.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInsert(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for insert operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInsertAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for insert-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMerge(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for merge operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields.</param>
            <param name="primaryField">The primary field from the database.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMerge(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for merge operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a SQL Statement for query operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateQueryAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String)">
            <summary>
            Creates a SQL Statement for query-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateTruncate(RepoDb.QueryBuilder,System.String)">
            <summary>
            Creates a SQL Statement for truncate operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A sql statement for truncate operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateUpdate(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for inline-update operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="where">The query expression.</param>
            <param name="primaryField">The primary field from the database.</param>
            <returns>A sql statement for update operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateUpdate(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for inline-update operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="where">The query expression.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for update operation.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.ICache">
            <summary>
            An interface used to mark the class to be a cacher for an object.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Add(System.String,System.Object,System.Int32,System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="key">The key to the cache.</param>
            <param name="value">The value of the cache.</param>
            <param name="expiration">The expiration in minutes of the cache item.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Add(RepoDb.CacheItem,System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="item">The cache item to be added in the collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Clear">
            <summary>
            Clears the collection of the cache.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Contains(System.String)">
            <summary>
            Checks whether the key is present in the collection.
            </summary>
            <param name="key">The name of the key to be checked.</param>
            <returns>A boolean value that signifies the presence of the key from the collection.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Get(System.String,System.Boolean)">
            <summary>
            Gets an object from the cache collection.
            </summary>
            <param name="key">The key of the cache object to be retrieved.</param>
            <returns>A cached item object from the cache collection based on the given key.</returns>
            <param name="throwException">Throws an exception if the item is not found.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Remove(System.String,System.Boolean)">
            <summary>
            Removes the item from the cache collection.
            </summary>
            <param name="key">The key of the item to be removed from the cache collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to remove an item.</param>
        </member>
        <member name="T:RepoDb.Interfaces.ITrace">
            <summary>
            An interface used to mark a class to be usable for tracing operations. A trace object is being used by the repositories on every operations
            (before or after) the actual execution. It provides the flexibility of the operations to be traceable and debuggable. The caller can modify
            the SQL Statements or the parameters being passed prior the actual execution, or even cancel the prior-execution.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeBatchQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual batch query operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the batch query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeBulkInsert(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual bulk-insert operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the bulk-insert execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeCount(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual count operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the count execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeCountAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual count-all operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the count-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeDelete(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual delete operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the delete execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeDeleteAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual delete-all operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the delete-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteNonQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual execute non-query operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the execute non-query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual execute operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the execute query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteReader(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual execute reader operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the execute reader execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteScalar(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual execute scalar operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the execute scalar execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInsert(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual insert operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the insert execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInsertAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual insert-all operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the insert-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMerge(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual merge operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the merge execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual query operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeQueryAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual query-all operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the query-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeQueryMultiple(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual query-multiple operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeTruncate(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual truncate operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the truncate execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeUpdate(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual update operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the update execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterBatchQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual batch query operation execution.
            </summary>
            <param name="log">The log object referenced by the batch query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterBulkInsert(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual bulk-insert operation execution.
            </summary>
            <param name="log">The log object referenced by the bulk-insert execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterCount(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual count operation execution.
            </summary>
            <param name="log">The log object referenced by the count execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterCountAll(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual count-all operation execution.
            </summary>
            <param name="log">The log object referenced by the count-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterDelete(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual delete operation execution.
            </summary>
            <param name="log">The log object referenced by the delete execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterDeleteAll(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual delete-all operation execution.
            </summary>
            <param name="log">The log object referenced by the delete-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteNonQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual execute non-query operation execution.
            </summary>
            <param name="log">The log object referenced by the execute non-query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual execute query operation execution.
            </summary>
            <param name="log">The log object referenced by the execute query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteReader(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual execute reader operation execution.
            </summary>
            <param name="log">The log object referenced by the execute reader execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteScalar(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual execute scalar operation execution.
            </summary>
            <param name="log">The log object referenced by the execute scalar execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInsert(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual insert operation execution.
            </summary>
            <param name="log">The log object referenced by the insert execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInsertAll(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual insert-all operation execution.
            </summary>
            <param name="log">The log object referenced by the insert-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMerge(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual merge operation execution.
            </summary>
            <param name="log">The log object referenced by the merge execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual query operation execution.
            </summary>
            <param name="log">The log object referenced by the query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterQueryAll(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual query-all operation execution.
            </summary>
            <param name="log">The log object referenced by the query-all execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterQueryMultiple(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual query-multiple operation execution.
            </summary>
            <param name="log">The log object referenced by the query execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterTruncate(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual truncate operation execution.
            </summary>
            <param name="log">The log object referenced by the truncate execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterUpdate(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual update operation execution.
            </summary>
            <param name="log">The log object referenced by the update execution.</param>
        </member>
        <member name="T:RepoDb.BaseRepository`2">
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <summary>
            A base object for all entity-based repositories.
            </summary>
            <typeparam name="TEntity">The type of data entity object to be mapped on this repository.</typeparam>
            <typeparam name="TDbConnection">The type of the <see cref="T:System.Data.Common.DbConnection"/> object.</typeparam>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAll(System.String,System.Data.IDbTransaction)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAllAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            Counts all the data from the database in an asynchronous way.
            </summary>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAll(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Data.IDbTransaction)">
            <summary>
            Inserts multiple data in the database.
            </summary>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAllAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Data.IDbTransaction)">
            <summary>
            Inserts multiple data in the database in an asynchronous way.
            </summary>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAll(System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the database.
            </summary>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAllAsync(System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the database in an asynchronous way.
            </summary>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Truncate">
            <summary>
            Truncates a table from the database.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Truncate(System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.TruncateAsync">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.TruncateAsync(System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Object,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Object,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,RepoDb.Field,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifer field to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,RepoDb.Field,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifer field to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Insert(`0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Insert``1(`0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAsync(`0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAsync``1(`0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAll(System.Data.IDbTransaction)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAllAsync(System.Data.IDbTransaction)">
            <summary>
            Deletes all the data from the database in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(`0,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(`0,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BulkInsert(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Data.IDbTransaction)">
            <summary>
            Bulk insert a list of data entity objects into the database.
            </summary>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BulkInsertAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Data.IDbTransaction)">
            <summary>
            Bulk insert a list of data entity objects into the database in an asynchronous way.
            </summary>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operations by this repository.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.ICache)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Int32,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Int32,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Enumerations.ConnectionPersistency,RepoDb.Interfaces.ICache,System.Int32,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="P:RepoDb.BaseRepository`2.DbRepository">
            <summary>
            Gets the underlying repository used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.ConnectionString">
            <summary>
            Gets the connection used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.CommandTimeout">
            <summary>
            Gets the command timeout value in seconds that is being used by this repository on every operation.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.Cache">
            <summary>
            Gets the cache object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.CacheItemExpiration">
            <summary>
            Gets the expiration in minutes of the cache item.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.Trace">
            <summary>
            Gets the trace object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.StatementBuilder">
            <summary>
            Gets the statement builder object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.ConnectionPersistency">
            <summary>
            Gets the database connection persistency used by this repository. The default value is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CreateConnection">
            <summary>
            Creates a new instance of the database connection object. If the value of <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property
            is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CreateConnection(System.Boolean)">
            <summary>
            Creates a new instance of the database connection. If the value <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property
            is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <param name="force">Set to true to forcely create a new instance of <see cref="T:System.Data.Common.DbConnection"/> object regardless of the persistency.</param>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Dispose">
            <summary>
            Dispose the current repository instance. It is not necessary to call this method if the value of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/>
            property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>. This method only manages the connection persistency for the repositories where the value
            of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and 
            converts the result back to an enumerable list of data entity object.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteNonQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected data during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteNonQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/>
            and returns the number of affected data during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalar(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalarAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalar``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalarAsync``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="T:RepoDb.DbConnectionExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryInternal``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsyncInternal``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetRowsCopiedField">
            <summary>
            Gets the <see cref="T:System.Data.SqlClient.SqlBulkCopy"/> private variable reflected field.
            </summary>
            <returns>The actual field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert a list of data entity objects into the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsert``1(System.Data.IDbConnection,System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsert(System.Data.IDbConnection,System.String,System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The target table for bulk-insert operation.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertInternal``1(System.Data.IDbConnection,System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert a list of data entity objects into the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertInternal(System.Data.IDbConnection,System.Data.Common.DbDataReader,System.String,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database.
            </summary>
            <param name="tableName">The target table for bulk-insert operation.</param>
            <param name="connection">The connection object to be used.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert a list of data entity objects into the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertAsync``1(System.Data.IDbConnection,System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertAsync(System.Data.IDbConnection,System.String,System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The target table for bulk-insert operation.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertAsyncInternal``1(System.Data.IDbConnection,System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertAsyncInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert a list of data entity objects into the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertAsyncInternal(System.Data.IDbConnection,System.Data.Common.DbDataReader,System.String,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database in an asynchronous way.
            </summary>
            <param name="tableName">The target table for bulk-insert operation.</param>
            <param name="connection">The connection object to be used.</param>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="bulkCopyTimeout">The timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAll``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllInternal``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsync``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            CountAlls the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsyncInternal``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            CountAlls the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAll(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllInternal(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsync(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            CountAlls the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsyncInternal(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            CountAlls the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllInternalBase(System.Data.IDbConnection,RepoDb.Requests.CountAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllInternalAsyncBase(System.Data.IDbConnection,RepoDb.Requests.CountAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            CountAlls the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity objects.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database in asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsyncInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database in asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllInternal(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database (certain fields only).
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsyncInternal(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts multiple data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Boolean)">
            <summary>
            Inserts multiple data in the database.
            </summary>
            <typeparam name="TEntity">The type of the objects to be enumerated.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity object to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="skipIdentityCheck">True to skip the identity check.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsyncInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Boolean)">
            <summary>
            Inserts multiple data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the objects to be enumerated.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity object to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="skipIdentityCheck">True to skip the identity check.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsyncInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The entity object to be used for update.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="whereOrPrimaryKey">The dynamic expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateInternal``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="whereOrPrimaryKey">The dynamic expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsyncInternal``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateInternal(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsyncInternal(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing data in the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateInternalBase(System.Data.IDbConnection,RepoDb.Requests.UpdateRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.UpdateRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.UpdateRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.UpdateRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Truncate``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateInternal``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsyncInternal``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Truncate(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateInternal(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsync(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsyncInternal(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateInternalBase(System.Data.IDbConnection,RepoDb.Requests.TruncateRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.TruncateRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Truncates a table from the database in an asychronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllInternal``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsyncInternal``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllInternal(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsyncInternal(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all the data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteAllRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteAllRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 2 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``2(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 2 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``3(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 4 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``4(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 5 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``5(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 5 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 6 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``6(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 6 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 7 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The top number of data to be used (at T7).</param>
            <param name="hints7">The table hints to be used (at T7). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``7(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 7 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The top number of data to be used (at T7).</param>
            <param name="hints7">The table hints to be used (at T7). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 2 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``2(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 2 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``3(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 4 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``4(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 5 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``5(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 5 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 6 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``6(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 6 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 7 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The top number of data to be used (at T7).</param>
            <param name="hints7">The table hints to be used (at T7). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``7(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query a multiple resultset from the database based on the given 7 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The top number of data to be used (at T7).</param>
            <param name="hints7">The table hints to be used (at T7). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsyncInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force to query from the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,RepoDb.Field,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifer field to be used during merge operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeInternal``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database in an asychronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,RepoDb.Field,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database in an asychronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The field to be used during merge operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database in an asychronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsyncInternal``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity object into an existing data in the database in an asychronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge(System.Data.IDbConnection,System.String,System.Object,RepoDb.Field,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier fields to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeInternal(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier fields to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync(System.Data.IDbConnection,System.String,System.Object,RepoDb.Field,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier fields to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier fields to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeInternalBase(System.Data.IDbConnection,RepoDb.Requests.MergeRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MergeRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.MergeRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Merges a data entity object into an existing data in the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MergeRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``2(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertInternal``2(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database in asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``2(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database in asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsyncInternal``2(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database in asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database (certain fields only).
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database (certain fields only).
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsyncInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertInternalBase``2(System.Data.IDbConnection,RepoDb.Requests.InsertRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.InsertRequest"/> object.</param>
            <param name="param">The data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsyncInternalBase``2(System.Data.IDbConnection,RepoDb.Requests.InsertRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.InsertRequest"/> object.</param>
            <param name="param">The dynamic object or the data entity object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsyncInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing data from the database in asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsyncInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountInternalBase(System.Data.IDbConnection,RepoDb.Requests.CountRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountInternalAsyncBase(System.Data.IDbConnection,RepoDb.Requests.CountRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateCommand(System.Data.IDbConnection,System.String,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Creates a command object.
            </summary>
            <param name="connection">The connection to be used when creating a command object.</param>
            <param name="commandText">The value of the <see cref="P:System.Data.IDbCommand.CommandText"/> property.</param>
            <param name="commandType">The value of the <see cref="P:System.Data.IDbCommand.CommandType"/> property.</param>
            <param name="commandTimeout">The value of the <see cref="P:System.Data.IDbCommand.CommandTimeout"/> property.</param>
            <param name="transaction">The value of the <see cref="P:System.Data.IDbCommand.Transaction"/> property.</param>
            <returns>A command object instance containing the defined property values passed.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.EnsureOpen(System.Data.IDbConnection)">
            <summary>
            Ensures the connection object is open.
            </summary>
            <param name="connection">The connection to be opened.</param>
            <returns>The instance of the current connection object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.EnsureOpenAsync(System.Data.IDbConnection)">
            <summary>
            Ensures the connection object is open in an asynchronous way.
            </summary>
            <param name="connection">The connection to be opened.</param>
            <returns>The instance of the current connection object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQuery(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQuery``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean,System.Boolean)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="basedOnFields">True if the conversion will be based on the data reader fields.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsyncInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean,System.Boolean)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="basedOnFields">True if the conversion will be based on the data reader fields.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a multiple query statement from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> used to extract the results.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryMultipleAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a multiple query statement from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> used to extract the results.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns><returns>The instance of the <see cref="T:System.Data.IDataReader"/> object.</returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReaderInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns><returns>The instance of the <see cref="T:System.Data.IDataReader"/> object.</returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns><returns>The instance of the <see cref="T:System.Data.IDataReader"/> object.</returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReaderAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns><returns>The instance of the <see cref="T:System.Data.IDataReader"/> object.</returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected data during the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQueryInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected data during the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected data during the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQueryAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database in asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected data during the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsyncInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKey``1">
            <summary>
            Throws an exception if there is no defined primary key on the data entity type.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <returns>The primary <see cref="T:RepoDb.ClassProperty"/> of the type.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ValidateTransactionConnectionObject(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Validates whether the transaction object connection is object is equals to the connection object.
            </summary>
            <param name="connection">The connection object to be validated.</param>
            <param name="transaction">The transaction object to compare.</param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhereOrPrimaryKeyToQueryGroup``1(System.Object)">
            <summary>
            Converts the primary key to <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="whereOrPrimaryKey">The dynamic expression or the actual value of the primary key.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(System.Object)">
            <summary>
            Converts an object into a <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="where">The dynamic expression.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Converts the primary key to <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup``1(RepoDb.ClassProperty,``0)">
            <summary>
            Converts the primary key to <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="property">The instance of <see cref="T:RepoDb.ClassProperty"/> to be converted.</param>
            <param name="entity">The instance of the actual entity.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(RepoDb.QueryField)">
            <summary>
            Converts the <see cref="T:RepoDb.QueryField"/> to become a <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.QueryField"/> to be converted.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
            <summary>
            Converts the <see cref="T:RepoDb.QueryField"/> to become a <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="fields">The list of <see cref="T:RepoDb.QueryField"/> objects to be converted.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateDbCommandForExecution(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:System.Data.Common.DbCommand"/> object to be used for execution.
            </summary>
            <param name="connection">The connection object.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">The list of parameters.</param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout to be used.</param>
            <param name="transaction">The transaction object to be used.</param>
            <param name="skipCommandArrayParametersCheck">True to skip the checking of the array parameters.</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToRawSqlWithArrayParams(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts the command text into a raw SQL with Array Parameters.
            </summary>
            <param name="commandText">The current command text where the raw sql parameters will be replaced.</param>
            <param name="parameterName">The name of the parameter to be replaced.</param>
            <param name="values">The array of the values.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AsCommandArrayParameters(System.Object,System.String@)">
            <summary>
            Replaces the array parameter command texts and return the list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.
            </summary>
            <param name="param">The parameter passed.</param>
            <param name="commandText">The command text to be replaced.</param>
            <returns>A list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AsCommandArrayParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.String@)">
            <summary>
            Replaces the array parameter command texts and return the list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.
            </summary>
            <param name="dictionary">The parameters from the <see cref="T:System.Collections.Generic.Dictionary`2"/> object.</param>
            <param name="commandText">The command text to be replaced.</param>
            <returns>A list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AsCommandArrayParameters(RepoDb.QueryGroup,System.String@)">
            <summary>
            Replaces the array parameter command texts and return the list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.
            </summary>
            <param name="queryGroup">The value of the <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="commandText">The command text to be replaced.</param>
            <returns>A list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AsCommandArrayParameters(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String@)">
            <summary>
            Replaces the array parameter command texts and return the list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.
            </summary>
            <param name="queryFields">The list of <see cref="T:RepoDb.QueryField"/> objects.</param>
            <param name="commandText">The command text to be replaced.</param>
            <returns>A list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AsCommandArrayParameters(RepoDb.QueryField,System.String@)">
            <summary>
            Replaces the array parameter command texts and return the list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.
            </summary>
            <param name="queryField">The value of <see cref="T:RepoDb.QueryField"/> object.</param>
            <param name="commandText">The command text to be replaced.</param>
            <returns>A list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AsCommandArrayParameter(System.String,System.Collections.Generic.IEnumerable{System.Object},System.String@)">
            <summary>
            Replaces the array parameter command texts and return the list of <see cref="T:RepoDb.CommandArrayParameter"/> objects.
            </summary>
            <param name="name">The target name of the <see cref="T:RepoDb.CommandArrayParameter"/> object.</param>
            <param name="values">The array value of the <see cref="T:RepoDb.CommandArrayParameter"/> object.</param>
            <param name="commandText">The command text to be replaced.</param>
            <returns>An instance of <see cref="T:RepoDb.CommandArrayParameter"/> object.</returns>
        </member>
        <member name="T:RepoDb.DbField">
            <summary>
            A class the holds the column definition of the database table columns.
            </summary>
        </member>
        <member name="M:RepoDb.DbField.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Type,System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbField"/> object.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Name">
            <summary>
            Gets the quoted name of the database field.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.UnquotedName">
            <summary>
            Gets the unquoted name of the database field.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.IsPrimary">
            <summary>
            Gets the value whether the column is a primary column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.IsIdentity">
            <summary>
            Gets the value whether the column is an identify column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.IsNullable">
            <summary>
            Gets the value whether the column is nullable.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Type">
            <summary>
            Gets the .NET type of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Size">
            <summary>
            Gets the size of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Precision">
            <summary>
            Gets the precision of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Scale">
            <summary>
            Gets the scale of the column.
            </summary>
        </member>
        <member name="M:RepoDb.DbField.ToString">
            <summary>
            Gets the string that represents the instance of this <see cref="T:RepoDb.DbField"/> object.
            </summary>
            <returns>The string that represents the instance of this <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.DbField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.DbField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.DbField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.DbField.Equals(RepoDb.DbField)">
            <summary>
            Compares the <see cref="T:RepoDb.DbField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DbField.op_Equality(RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.DbField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DbField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DbField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DbField.op_Inequality(RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.DbField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DbField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DbField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.DbFieldCache">
            <summary>
            A class used to cache the list of <see cref="T:RepoDb.DbField"/> of the database table.
            </summary>
        </member>
        <member name="M:RepoDb.DbFieldCache.Get(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.DbField"/> of the database table based on the data entity mapped name.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="M:RepoDb.DbFieldCache.Get``1(System.String,System.String)">
            <summary>
            Gets the cached field definitions of the entity.
            </summary>
            <typeparam name="TDbConnection">The type of the <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="connectionString">The connection string to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="M:RepoDb.DbFieldCache.Get(System.Type,System.String,System.String)">
            <summary>
            Gets the cached field definitions of the entity.
            </summary>
            <param name="type">The type of <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="connectionString">The connection string to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="T:RepoDb.DbIdentityCache">
            <summary>
            A class used to cache the database identity column of the table.
            </summary>
        </member>
        <member name="M:RepoDb.DbIdentityCache.Get``1(System.Data.IDbConnection)">
            <summary>
            Gets the cached identity column of the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <returns>The cached identity <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbIdentityCache.Get(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the cached identity column of the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>The cached identity <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbIdentityCache.Get``2(System.String)">
            <summary>
            Gets the cached identity column of the table.
            </summary>
            <typeparam name="TDbConnection">The type of the <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="connectionString">The connection string to connect to.</param>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <returns>The cached identity <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbIdentityCache.Get``1(System.String,System.String)">
            <summary>
            Gets the cached identity column of the table.
            </summary>
            <typeparam name="TDbConnection">The type of the <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="connectionString">The connection string to connect to.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>The cached identity <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbIdentityCache.Get(System.Type,System.String,System.String)">
            <summary>
            Gets the cached identity column of the table.
            </summary>
            <param name="type">The type of <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="connectionString">The connection string to connect to.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>The cached identity <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="T:RepoDb.IdentityCache">
            <summary>
            A class used to cache the identity property of the entity.
            </summary>
        </member>
        <member name="M:RepoDb.IdentityCache.Get``1">
            <summary>
            Gets the cached identity property of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <returns>The cached identity property.</returns>
        </member>
        <member name="M:RepoDb.IdentityCache.Get(System.Type)">
            <summary>
            Gets the cached identity property of the data entity.
            </summary>
            <param name="type">The type of the target entity.</param>
            <returns>The cached identity property.</returns>
        </member>
        <member name="T:RepoDb.DbRepository`1">
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <summary>
            A base object for all shared-based repositories.
            </summary>
            <typeparam name="TDbConnection">The type of the <see cref="T:System.Data.Common.DbConnection"/> object.</typeparam>
        </member>
        <member name="M:RepoDb.DbRepository`1.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Data.IDbTransaction)">
            <summary>
            Bulk insert a list of data entity objects into the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BulkInsert``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Data.IDbTransaction)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BulkInsertAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Data.IDbTransaction)">
            <summary>
            Bulk insert a list of data entity objects into the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entities">The list of the data entities to be bulk-inserted.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BulkInsertAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.BulkInsertMapItem},System.Data.SqlClient.SqlBulkCopyOptions,System.Data.IDbTransaction)">
            <summary>
            Bulk insert an instance of <see cref="T:System.Data.Common.DbDataReader"/> object into the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object to be used in the bulk-insert operation.</param>
            <param name="mappings">The list of the columns to be used for mappings. If this parameter is not set, then all columns will be used for mapping.</param>
            <param name="copyOptions">The bulk-copy options to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAll``1(System.String,System.Data.IDbTransaction)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAllAsync``1(System.String,System.Data.IDbTransaction)">
            <summary>
            Counts all the table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAll(System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts all the table data from the database.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAllAsync(System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts all the data from the database in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAll``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Data.IDbTransaction)">
            <summary>
            Inserts multiple data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Data.IDbTransaction)">
            <summary>
            Inserts multiple data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAll(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Inserts multiple data in the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Inserts multiple data in the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/>s to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAll``1(System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAllAsync``1(System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 2 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``3(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``4(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 4 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``5(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 5 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``6(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 6 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``7(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 7 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The top number of data to be used (at T7).</param>
            <param name="hints7">The table hints to be used (at T7). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 2 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``3(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 3 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``4(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 4 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``5(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 5 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``6(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 6 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``7(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query a multiple resultset from the database based on the given 7 target types in an asychronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The top number of data to be used (at T1).</param>
            <param name="hints1">The table hints to be used (at T1). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The top number of data to be used (at T2).</param>
            <param name="hints2">The table hints to be used (at T2). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The top number of data to be used (at T3).</param>
            <param name="hints3">The table hints to be used (at T3). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The top number of data to be used (at T4).</param>
            <param name="hints4">The table hints to be used (at T4). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The top number of data to be used (at T5).</param>
            <param name="hints5">The table hints to be used (at T5). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The top number of data to be used (at T6).</param>
            <param name="hints6">The table hints to be used (at T6). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The top number of data to be used (at T7).</param>
            <param name="hints7">The table hints to be used (at T7). See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates an existing data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate``1">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate``1(System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync``1">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync``1(System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate(System.String)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate(System.String,System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync(System.String)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The top number of data to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to null would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,RepoDb.Field,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifer field to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,RepoDb.Field,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifer field to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge(System.String,System.Object,RepoDb.Field,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifer field to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync(System.String,System.Object,RepoDb.Field,System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifer field to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges a data entity object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifer fields to be used during merge operation.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``1(``0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``2(``0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``1(``0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``2(``0,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            The value of the primary key of the newly inserted data. Returns null if the 
            primary key property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``1(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database.
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``1(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Inserts a new data in the database in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the primary key result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``1(System.Data.IDbTransaction)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``1(System.Data.IDbTransaction)">
            <summary>
            Deletes all the data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll(System.String,System.Data.IDbTransaction)">
            <summary>
            Deletes all the data from the database.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            Deletes all the data from the database in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(``0,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(``0,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="whereOrPrimaryKey">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression or the primary key value to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,RepoDb.QueryField,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Counts the number of table data from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of data from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Queries a data from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operations by this repository.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.ICache,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Int32,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Int32,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Enumerations.ConnectionPersistency,RepoDb.Interfaces.ICache,System.Int32,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="P:RepoDb.DbRepository`1.ConnectionString">
            <summary>
            Gets the connection used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.CommandTimeout">
            <summary>
            Gets the command timeout value in seconds that is being used by this repository on every operation.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.Cache">
            <summary>
            Gets the cache object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.CacheItemExpiration">
            <summary>
            Gets the expiration in minutes of the cache item.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.Trace">
            <summary>
            Gets the trace object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.StatementBuilder">
            <summary>
            Gets the statement builder object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.ConnectionPersistency">
            <summary>
            Gets the database connection persistency used by this repository. The default value is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>.
            </summary>
        </member>
        <member name="M:RepoDb.DbRepository`1.CreateConnection">
            <summary>
            Creates a new instance of the database connection. If the value <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/>
            property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CreateConnection(System.Boolean)">
            <summary>
            Creates a new instance of the database connection. If the value <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/>
            property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <param name="force">Set to true to forcely create a new instance of <see cref="T:System.Data.Common.DbConnection"/> object regardless of the persistency.</param>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Dispose">
            <summary>
            Dispose the current repository instance (of type <see cref="T:RepoDb.DbRepository`1"/>). It is not necessary to call this method if the value of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/>
            property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>. This method only manages the connection persistency for the repositories where the value
            of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>.
            </summary>
        </member>
        <member name="M:RepoDb.DbRepository`1.DisposeConnectionForPerCall(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Disposes an <see cref="T:System.Data.IDbConnection"/> object if there is no <see cref="T:System.Data.IDbTransaction"/> object connected
            and if the current <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> value is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>.
            </summary>
            <param name="connection">The instance of <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.IDbTransaction"/> object.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQuery``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQueryAsync``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and 
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity object containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteNonQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected data during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteNonQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected data during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of integer that holds the number of data affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalar(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalarAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalar``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalarAsync``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="T:RepoDb.PrimaryCache">
            <summary>
            A class used to cache the primary property of the entity.
            </summary>
        </member>
        <member name="M:RepoDb.PrimaryCache.Get``1">
            <summary>
            Gets the cached primary property of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <returns>The cached primary property.</returns>
        </member>
        <member name="M:RepoDb.PrimaryCache.Get(System.Type)">
            <summary>
            Gets the cached primary property of the data entity.
            </summary>
            <param name="type">The type of the target entity.</param>
            <returns>The cached primary property.</returns>
        </member>
        <member name="T:RepoDb.CommandTextCache">
            <summary>
            A class used to cache the already-built command texts.
            </summary>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetBatchQueryText(RepoDb.Requests.BatchQueryRequest)">
            <summary>
            Gets a command text from the cache for the batch query operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetCountText(RepoDb.Requests.CountRequest)">
            <summary>
            Gets a command text from the cache for the count operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetCountAllText(RepoDb.Requests.CountAllRequest)">
            <summary>
            Gets a command text from the cache for the count-all operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetDeleteText(RepoDb.Requests.DeleteRequest)">
            <summary>
            Gets a command text from the cache for the delete operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetDeleteAllText(RepoDb.Requests.DeleteAllRequest)">
            <summary>
            Gets a command text from the cache for the delete-all operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertText(RepoDb.Requests.InsertRequest)">
            <summary>
            Gets a command text from the cache for the insert operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertAllText(RepoDb.Requests.InsertAllRequest)">
            <summary>
            Gets a command text from the cache for the insert-all operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMergeText(RepoDb.Requests.MergeRequest)">
            <summary>
            Gets a command text from the cache for the merge operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryText``1(RepoDb.Requests.QueryRequest)">
            <summary>
            Gets a command text from the cache for the query operation.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryAllText``1(RepoDb.Requests.QueryAllRequest)">
            <summary>
            Gets a command text from the cache for the query-all operation.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryMultipleText``1(RepoDb.Requests.QueryMultipleRequest)">
            <summary>
            Gets a command text from the cache for the query-multiple operation.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetTruncateText(RepoDb.Requests.TruncateRequest)">
            <summary>
            Gets a command text from the cache for the truncate operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetUpdateText(RepoDb.Requests.UpdateRequest)">
            <summary>
            Gets a command text from the cache for the update operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetActualFields(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Get the actual list of <see cref="T:RepoDb.Field"/> objects of the table based on the actual list of <see cref="T:RepoDb.DbField"/> objects.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="fields">The target name of the table.</param>
            <param name="tableName">The list of fields from the data entity object.</param>
            <returns>The actual list of <see cref="T:RepoDb.Field"/> objects of the table.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetPrimaryField(RepoDb.Requests.BaseRequest)">
            <summary>
            Gets the primary <see cref="T:RepoDb.DbField"/> object.
            </summary>
            <param name="request">The request object.</param>
            <returns>The primary <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetIdentityField(RepoDb.Requests.BaseRequest)">
            <summary>
            Gets the identity <see cref="T:RepoDb.DbField"/> object.
            </summary>
            <param name="request">The request object.</param>
            <returns>The identity <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.EnsureStatementBuilder(System.Data.IDbConnection,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Throws an exception of the builder is not defined.
            </summary>
            <param name="connection">The connection object to identified.</param>
            <param name="builder">The builder to be checked.</param>
            <returns>The instance of available statement builder.</returns>
        </member>
        <member name="T:RepoDb.Constant">
            <summary>
            A class that holds the constant values for <see cref="N:RepoDb"/> library.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.DefaultBatchInsertSize">
            <summary>
            The default value of the batch insert size.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.DefaultCacheItemExpirationInMinutes">
            <summary>
            The default value of the cache expiration in minutes.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.DefaultParameterPrefix">
            <summary>
            The default prefix to the parameters.
            </summary>
        </member>
        <member name="T:RepoDb.PrimaryIdentityCache">
            <summary>
            A static class used to get the cached value of data entity primary property as an identity.
            </summary>
        </member>
        <member name="M:RepoDb.PrimaryIdentityCache.Get``1(System.Data.IDbConnection)">
            <summary>
            Gets the value that defines whether the data entity has primary key is identity.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection">The connection object to be used.</param>
            <returns>A boolean value indicating the identification of the column.</returns>
        </member>
        <member name="T:RepoDb.DataEntityDataReader`1">
            <summary>
            A data reader object used to manipulate the enumerable list of data entity objects.
            </summary>
            <typeparam name="TEntity">The type of the data entity</typeparam>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object.
            </summary>
            <param name="entities">The list of the data entity object to be used for manipulation.</param>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Data.IDbConnection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object.
            </summary>
            <param name="entities">The list of the data entity object to be used for manipulation.</param>
            <param name="connection">The actual <see cref="T:System.Data.IDbConnection"/> object used.</param>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of data entity objects.
            </summary>
            <returns>The enumerator object of the current collection.</returns>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Enumerator">
            <summary>
            Returns an enumerator that iterates through a collection of data entity objects.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Entities">
            <summary>
            Gets the list of data entity objects.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Properties">
            <summary>
            Gets the properties of data entity object.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Position">
            <summary>
            Gets the current position of the enumerator.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Item(System.Int32)">
            <summary>
            Gets the current value from the index.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The value from the column index.</returns>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Item(System.String)">
            <summary>
            Gets the current value from the name.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value from the column name.</returns>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Depth">
            <summary>
            Gets the depth value.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.IsClosed">
            <summary>
            Gets the value that indicates whether the current reader is closed.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.IsDisposed">
            <summary>
            Gets the value that indicates whether the current reader is already disposed.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.RecordsAffected">
            <summary>
            Gets the number of rows affected by the iteration.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.FieldCount">
            <summary>
            Gets the number of properties the data entity object has.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.HasRows">
            <summary>
            Gets a value that signify whether the current data reader has data entities.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Close">
            <summary>
            Closes the current data reader.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Dispose">
            <summary>
            Disposes the current data reader.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Reset">
            <summary>
            Resets the pointer of the position to the beginning.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetByte(System.Int32)">
            <summary>
            Gets the byte value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            GetBytes
            </summary>
            <param name="i">Int</param>
            <param name="fieldOffset">Int64</param>
            <param name="buffer">byte[]</param>
            <param name="bufferoffset">Int</param>
            <param name="length">Int</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetChar(System.Int32)">
            <summary>
            Gets the char value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            GetChars
            </summary>
            <param name="i">Int</param>
            <param name="fieldoffset">Int64</param>
            <param name="buffer">char[]</param>
            <param name="bufferoffset">Int</param>
            <param name="length">Int</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetData(System.Int32)">
            <summary>
            GetData
            </summary>
            <param name="i">Int</param>
            <returns>Int</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the property data type from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The property type name from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDateTime(System.Int32)">
            <summary>
            Gets the date time value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDecimal(System.Int32)">
            <summary>
            Gets the decimal value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDouble(System.Int32)">
            <summary>
            Gets the double value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the property from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The property type from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetFloat(System.Int32)">
            <summary>
            Gets the float value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetGuid(System.Int32)">
            <summary>
            Gets the Guid value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetInt16(System.Int32)">
            <summary>
            Gets the short value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetInt32(System.Int32)">
            <summary>
            Gets the int value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetInt64(System.Int32)">
            <summary>
            Gets the long value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetName(System.Int32)">
            <summary>
            Gets the name of the property from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The name from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetOrdinal(System.String)">
            <summary>
            Gets the index of the property based on the property name.
            </summary>
            <param name="name">The index of the property.</param>
            <returns>The index of the property from property name.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetSchemaTable">
            <summary>
            Gets the table schema.
            </summary>
            <returns>An instance of the <see cref="T:System.Data.DataTable"/> with the table schema.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetString(System.Int32)">
            <summary>
            Gets the string value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetValue(System.Int32)">
            <summary>
            Gets the current value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetValues(System.Object[])">
            <summary>
            Populates the values of the array of the current values of the current row.
            </summary>
            <param name="values">The array variable on which to populate the data.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.IsDBNull(System.Int32)">
            <summary>
            Gets a value that checks whether the value of the property from the desired index is equals to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.NextResult">
            <summary>
            Forwards the data reader to the next result.
            </summary>
            <returns>Returns true if the forward operation is successful.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Read">
            <summary>
            Forward the pointer into the next record.
            </summary>
            <returns>A value that indicates whether the movement is successful.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.ThrowExceptionIfNotAvailable">
            <summary>
            Throws an exception if the current data reader is not available.
            </summary>
        </member>
        <member name="T:RepoDb.FieldCache">
            <summary>
            A class used to cache the properties of the data entity as a list <see cref="T:RepoDb.Field"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.FieldCache.Get``1">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.Field"/> objects of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <returns>The cached list <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.FieldCache.Get(System.Type)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.Field"/> objects of the data entity.
            </summary>
            <param name="type">The type of the target entity.</param>
            <returns>The cached list <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="T:RepoDb.PropertyMappedNameCache">
            <summary>
            A class used to cache the mapped-name of the property.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Get(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the cached mapped-name of the property.
            </summary>
            <param name="property">The target property.</param>
            <param name="quoted">True whether the string is quoted.</param>
            <returns>The cached mapped-name of the property.</returns>
        </member>
        <member name="T:RepoDb.PropertyCache">
            <summary>
            A class used to cache the properties of the entity.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyCache.Get``1">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.ClassProperty"/> objects of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the target entity.</typeparam>
            <returns>The cached list <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get(System.Type)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.ClassProperty"/> objects of the data entity.
            </summary>
            <param name="type">The type of the target entity.</param>
            <returns>The cached list <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="T:RepoDb.PropertyValue">
            <summary>
            A class used when extracting the class object properties and values.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyValue.#ctor(System.String,System.Object,RepoDb.ClassProperty)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="property">The actual property object.</param>
        </member>
        <member name="P:RepoDb.PropertyValue.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:RepoDb.PropertyValue.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:RepoDb.PropertyValue.Property">
            <summary>
            Gets the actual property object.
            </summary>
        </member>
        <member name="T:RepoDb.QueryGroupTypeMap">
            <summary>
            A class used to hold the <see cref="P:RepoDb.QueryGroupTypeMap.QueryGroup"/> object type mapping. This class has been introduced
            to support the needs of the multi-resultsets query operation.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroupTypeMap.#ctor(RepoDb.QueryGroup,System.Type)">
            <summary>
            Creates an instance of <see cref="T:RepoDb.QueryGroupTypeMap"/> class.
            </summary>
            <param name="queryGroup">The <see cref="P:RepoDb.QueryGroupTypeMap.QueryGroup"/> object.</param>
            <param name="type">The type where the <see cref="P:RepoDb.QueryGroupTypeMap.QueryGroup"/> object is mapped.</param>
        </member>
        <member name="P:RepoDb.QueryGroupTypeMap.QueryGroup">
            <summary>
            Gets the current <see cref="P:RepoDb.QueryGroupTypeMap.QueryGroup"/> object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroupTypeMap.MappedType">
            <summary>
            Gets the type where the current <see cref="P:RepoDb.QueryGroupTypeMap.QueryGroup"/> is mapped.
            </summary>
        </member>
        <member name="T:RepoDb.Reflection.DataCommand">
            <summary>
            A static classed used to convert the <see cref="T:System.Data.Common.DbCommand"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.DataCommand.CreateParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32)">
            <summary>
            Create a parameters for the <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> object where to set the parameters.</param>
            <param name="inputFields">The list of <see cref="T:RepoDb.DbField"/> objects where the parameters will be based.</param>
            <param name="outputFields">The list of the output <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="batchSize">The batch size of the entities to be passed.</param>
        </member>
        <member name="M:RepoDb.Reflection.DataCommand.SetParameters``1(System.Data.Common.DbCommand,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            Set the parameters (and/or values) of the <see cref="T:System.Data.Common.DbCommand"/> object based on the passed data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> object where to set the parameters.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of the data entity objects.</param>
            <param name="inputFields">The list of the input <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="outputFields">The list of the output <see cref="T:RepoDb.DbField"/> objects to be used.</param>
        </member>
        <member name="T:RepoDb.Reflection.DataReader">
            <summary>
            A static classed used to manipulate the <see cref="T:System.Data.Common.DbDataReader"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerable``1(System.Data.Common.DbDataReader,System.Data.IDbConnection)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of data entity object.
            </summary>
            <typeparam name="TEntity">The data entity type to convert.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <returns>An array of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerable``1(System.Data.Common.DbDataReader,System.Data.IDbConnection,System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of data entity object.
            </summary>
            <typeparam name="TEntity">The data entity type to convert.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="basedOnFields">Check whether to create a delegate based on the data reader fields.</param>
            <returns>An array of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerable(System.Data.Common.DbDataReader)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of <see cref="T:System.Dynamic.ExpandoObject"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <returns>An array of <see cref="T:System.Dynamic.ExpandoObject"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerable(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of <see cref="T:System.Dynamic.ExpandoObject"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="basedOnFields">Check whether to create a delegate based on the data reader fields.</param>
            <returns>An array of <see cref="T:System.Dynamic.ExpandoObject"/> objects.</returns>
        </member>
        <member name="T:RepoDb.Reflection.Delegates.DataReaderToDataEntityFunction`1">
            <summary>
            A compiled function that is used to map the <see cref="T:System.Data.Common.DbDataReader"/> into data entity object.
            </summary>
            <typeparam name="TEntity">The data entity object to map.</typeparam>
            <returns>An instance of data entity object containing the values from the <see cref="T:System.Data.Common.DbDataReader"/> object.</returns>
        </member>
        <member name="T:RepoDb.Reflection.Delegates.DataReaderToExpandoObjectFunction">
            <summary>
            A compiled function that is used to map the <see cref="T:System.Data.Common.DbDataReader"/> into <see cref="T:System.Dynamic.ExpandoObject"/> object.
            </summary>
            <returns>An instance of <see cref="T:System.Dynamic.ExpandoObject"/> object containing the values from the <see cref="T:System.Data.Common.DbDataReader"/> object.</returns>
        </member>
        <member name="T:RepoDb.Reflection.FunctionFactory">
            <summary>
            A static factory class used to create a custom function.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.GetDataReaderToDataEntityFunction``1(System.Data.Common.DbDataReader,System.Data.IDbConnection)">
            <summary>
            Gets a compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of data entity objects.
            </summary>
            <typeparam name="TEntity">The data entity object to convert to.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <returns>A compiled function that is used to cover the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.GetMemberAssignmentsForDataEntity``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IEnumerable{RepoDb.DataReaderFieldDefinition},System.Data.IDbConnection)">
            <summary>
            Returns the list of the bindings for the entity.
            </summary>
            <typeparam name="TEntity">The target entity type.</typeparam>
            <param name="newEntityExpression">The new entity expression.</param>
            <param name="readerParameterExpression">The data reader parameter.</param>
            <param name="readerFields">The list of fields to be bound from the data reader.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <returns>The enumerable list of member assignment and bindings.</returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.GetDataReaderToExpandoObjectFunction(System.Data.Common.DbDataReader)">
            <summary>
            Gets a compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of dynamic objects.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <returns>A compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.GetElementInitsForDictionary(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IList{RepoDb.DataReaderFieldDefinition})">
            <summary>
            Returns the list of the bindings for the object.
            </summary>
            <param name="readerParameterExpression">The data reader parameter.</param>
            <param name="readerFields">The list of fields to be bound from the data reader.</param>
            <returns>The enumerable list of child elements initializations.</returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.GetDataCommandParameterSetterFunction``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32)">
            <summary>
            Gets a compiled function that is used to set the <see cref="T:System.Data.Common.DbParameter"/> objects of the <see cref="T:System.Data.Common.DbCommand"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity object.</typeparam>
            <param name="inputFields">The list of the input <see cref="T:RepoDb.DbField"/> objects.</param>
            <param name="outputFields">The list of the input <see cref="T:RepoDb.DbField"/> objects.</param>
            <param name="batchSize">The batch size of the entity to be passed.</param>
            <returns>A compiled function that is used to set the <see cref="T:System.Data.Common.DbParameter"/> objects of the <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CreateDbCommandParametersFromFields(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32)">
            <summary>
            Create the <see cref="T:System.Data.Common.DbCommand"/> parameters based on the list of <see cref="T:RepoDb.DbField"/> objects.
            </summary>
            <param name="command">The target <see cref="T:System.Data.Common.DbCommand"/> object.</param>
            <param name="inputFields">The list of the input <see cref="T:RepoDb.DbField"/> objects.</param>
            <param name="outputFields">The list of the output <see cref="T:RepoDb.DbField"/> objects.</param>
            <param name="batchSize">The batch size of the entities to be passed.</param>
        </member>
        <member name="T:RepoDb.Reflection.DataReaderConverter">
            <summary>
            A static classed used to convert the <see cref="T:System.Data.Common.DbDataReader"/> into data entity or dynamic objects.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.DataReaderConverter.ToEnumerable``1(System.Data.Common.DbDataReader,System.Data.IDbConnection)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of data entity object.
            </summary>
            <typeparam name="TEntity">The data entity type to convert.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <returns>An array of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReaderConverter.ToEnumerable``1(System.Data.Common.DbDataReader,System.Data.IDbConnection,System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of data entity object.
            </summary>
            <typeparam name="TEntity">The data entity type to convert.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="basedOnFields">Check whether to create a delegate based on the data reader fields.</param>
            <returns>An array of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReaderConverter.ToEnumerable(System.Data.Common.DbDataReader)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of <see cref="T:System.Dynamic.ExpandoObject"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <returns>An array of <see cref="T:System.Dynamic.ExpandoObject"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReaderConverter.ToEnumerable(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of <see cref="T:System.Dynamic.ExpandoObject"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="basedOnFields">Check whether to create a delegate based on the data reader fields.</param>
            <returns>An array of <see cref="T:System.Dynamic.ExpandoObject"/> objects.</returns>
        </member>
        <member name="T:RepoDb.FunctionCache">
            <summary>
            A class used to cache the compiled functions.
            </summary>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataReaderToDataEntityFunction``1(System.Data.Common.DbDataReader,System.Data.IDbConnection)">
            <summary>
            Gets a compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of data entity objects.
            </summary>
            <typeparam name="TEntity">The data entity object to convert to.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <returns>A compiled function that is used to cover the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataReaderToDataEntityFunction``1(System.Data.Common.DbDataReader,System.Data.IDbConnection,System.Boolean)">
            <summary>
            Gets a compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of data entity objects.
            </summary>
            <typeparam name="TEntity">The data entity object to convert to.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="basedOnFields">Check whether to create a compiled function based on the data reader fields.</param>
            <returns>A compiled function that is used to cover the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataReaderToExpandoObjectFunction(System.Data.Common.DbDataReader)">
            <summary>
            Gets a compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of dynamic objects.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <returns>A compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataReaderToExpandoObjectFunction(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            Gets a compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of dynamic objects.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="basedOnFields">Check whether to create a compiled function based on the data reader fields.</param>
            <returns>A compiled function that is used to convert the <see cref="T:System.Data.Common.DbDataReader"/> object into a list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataCommandParameterSetterFunction``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32)">
            <summary>
            Gets a compiled function that is used to set the <see cref="T:System.Data.Common.DbParameter"/> objects of the <see cref="T:System.Data.Common.DbCommand"/> object.
            </summary>
            <param name="key">The key to the cache.</param>
            <param name="inputFields">The list of the input <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="outputFields">The list of the output <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="batchSize">The batch size of the entities to be passed.</param>
            <returns>A compiled function that is used to set the <see cref="T:System.Data.Common.DbParameter"/> objects of the <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="T:RepoDb.Requests.BaseRequest">
            <summary>
            A base class for all operational request.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.BaseRequest.#ctor(System.String,System.Data.IDbConnection,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.BaseRequest"/> object.
            </summary>
            <param name="name">The name of request.</param>
            <param name="connection">The connection object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.Connection">
            <summary>
            Gets the connection object.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.StatementBuilder">
            <summary>
            Gets the statement builder.
            </summary>
        </member>
        <member name="T:RepoDb.Requests.CountRequest">
            <summary>
            A class that holds the value of the count operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.#ctor(System.Type,System.Data.IDbConnection,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.#ctor(System.String,System.Data.IDbConnection,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.CountRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.CountRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.CountRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.CountRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.Equals(RepoDb.Requests.CountRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.CountRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.op_Equality(RepoDb.Requests.CountRequest,RepoDb.Requests.CountRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.CountRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.op_Inequality(RepoDb.Requests.CountRequest,RepoDb.Requests.CountRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.CountRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.BatchQueryRequest">
            <summary>
            A class that holds the value of the batch query operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.#ctor(System.Type,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.#ctor(System.String,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Page">
            <summary>
            Gets the filter for the rows.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.RowsPerBatch">
            <summary>
            Gets the number of rows per batch.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.BatchQueryRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.Equals(RepoDb.Requests.BatchQueryRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.op_Equality(RepoDb.Requests.BatchQueryRequest,RepoDb.Requests.BatchQueryRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.BatchQueryRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.op_Inequality(RepoDb.Requests.BatchQueryRequest,RepoDb.Requests.BatchQueryRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.BatchQueryRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.CountAllRequest">
            <summary>
            A class that holds the value of the count-all operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.#ctor(System.String,System.Data.IDbConnection,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.CountAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.CountAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.CountAllRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.Equals(RepoDb.Requests.CountAllRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.CountAllRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.op_Equality(RepoDb.Requests.CountAllRequest,RepoDb.Requests.CountAllRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.CountAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.op_Inequality(RepoDb.Requests.CountAllRequest,RepoDb.Requests.CountAllRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.CountAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.InsertAllRequest">
            <summary>
            A class that holds the value of the insert operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.InsertAllRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.InsertAllRequest.BatchSize">
            <summary>
            Gets the size batch of the insertion.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.InsertAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.InsertAllRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.Equals(RepoDb.Requests.InsertAllRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.InsertAllRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.op_Equality(RepoDb.Requests.InsertAllRequest,RepoDb.Requests.InsertAllRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.InsertAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.op_Inequality(RepoDb.Requests.InsertAllRequest,RepoDb.Requests.InsertAllRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.InsertAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.MergeRequest">
            <summary>
            A class that holds the value of the merge operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.#ctor(System.Type,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MergeRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of qualifier fields.</param>
            <param name="connection">The connection object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.#ctor(System.String,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MergeRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of qualifier fields.</param>
            <param name="connection">The connection object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.MergeRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MergeRequest.Qualifiers">
            <summary>
            Gets the qualifier fields.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.MergeRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.MergeRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.Equals(RepoDb.Requests.MergeRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.MergeRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.op_Equality(RepoDb.Requests.MergeRequest,RepoDb.Requests.MergeRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.MergeRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.MergeRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.MergeRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.op_Inequality(RepoDb.Requests.MergeRequest,RepoDb.Requests.MergeRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.MergeRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.MergeRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.MergeRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.QueryMultipleRequest">
            <summary>
            A class that holds the value of the query multiple operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.#ctor(System.Nullable{System.Int32},System.Type,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.
            </summary>
            <param name="index">The index value.</param>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.#ctor(System.Nullable{System.Int32},System.String,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.
            </summary>
            <param name="index">The index value.</param>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Index">
            <summary>
            Gets the index used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Top">
            <summary>
            Gets the filter for the rows.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.QueryMultipleRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.Equals(RepoDb.Requests.QueryMultipleRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.op_Equality(RepoDb.Requests.QueryMultipleRequest,RepoDb.Requests.QueryMultipleRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.op_Inequality(RepoDb.Requests.QueryMultipleRequest,RepoDb.Requests.QueryMultipleRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.QueryAllRequest">
            <summary>
            A class that holds the value of the query operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.QueryAllRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryAllRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.QueryAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.QueryAllRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.Equals(RepoDb.Requests.QueryAllRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.QueryAllRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.op_Equality(RepoDb.Requests.QueryAllRequest,RepoDb.Requests.QueryAllRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.QueryAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.op_Inequality(RepoDb.Requests.QueryAllRequest,RepoDb.Requests.QueryAllRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.QueryAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.TruncateRequest">
            <summary>
            A class that holds the value of the truncate operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.#ctor(System.Type,System.Data.IDbConnection,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.TruncateRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.#ctor(System.String,System.Data.IDbConnection,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.TruncateRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.TruncateRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.TruncateRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.Equals(RepoDb.Requests.TruncateRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.TruncateRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.op_Equality(RepoDb.Requests.TruncateRequest,RepoDb.Requests.TruncateRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.TruncateRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.op_Inequality(RepoDb.Requests.TruncateRequest,RepoDb.Requests.TruncateRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.TruncateRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.DeleteAllRequest">
            <summary>
            A class that holds the value of the delete-all operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.#ctor(System.Type,System.Data.IDbConnection,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.#ctor(System.String,System.Data.IDbConnection,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.DeleteAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.Equals(RepoDb.Requests.DeleteAllRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.op_Equality(RepoDb.Requests.DeleteAllRequest,RepoDb.Requests.DeleteAllRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.DeleteAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.op_Inequality(RepoDb.Requests.DeleteAllRequest,RepoDb.Requests.DeleteAllRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.DeleteAllRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.UpdateRequest">
            <summary>
            A class that holds the value of the update operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.#ctor(System.Type,System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.UpdateRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="where">The query expression.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.#ctor(System.String,System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.UpdateRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="where">The query expression.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.UpdateRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.UpdateRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.UpdateRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.UpdateRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.Equals(RepoDb.Requests.UpdateRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.UpdateRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.op_Equality(RepoDb.Requests.UpdateRequest,RepoDb.Requests.UpdateRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.UpdateRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.UpdateRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.UpdateRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.op_Inequality(RepoDb.Requests.UpdateRequest,RepoDb.Requests.UpdateRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.UpdateRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.UpdateRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.UpdateRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.DeleteRequest">
            <summary>
            A class that holds the value of the delete operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.#ctor(System.Type,System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="where">The query expression.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.#ctor(System.String,System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="where">The query expression.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.DeleteRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.DeleteRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.DeleteRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.Equals(RepoDb.Requests.DeleteRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.DeleteRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.op_Equality(RepoDb.Requests.DeleteRequest,RepoDb.Requests.DeleteRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.DeleteRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.op_Inequality(RepoDb.Requests.DeleteRequest,RepoDb.Requests.DeleteRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.DeleteRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.InsertRequest">
            <summary>
            A class that holds the value of the insert operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.#ctor(System.Type,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.#ctor(System.String,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.InsertRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.InsertRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.InsertRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.Equals(RepoDb.Requests.InsertRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.InsertRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.op_Equality(RepoDb.Requests.InsertRequest,RepoDb.Requests.InsertRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.InsertRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.InsertRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.InsertRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.op_Inequality(RepoDb.Requests.InsertRequest,RepoDb.Requests.InsertRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.InsertRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.InsertRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.InsertRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.QueryRequest">
            <summary>
            A class that holds the value of the query operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.#ctor(System.Type,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.#ctor(System.String,System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Top">
            <summary>
            Gets the filter for the rows.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.QueryRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.QueryRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.Equals(RepoDb.Requests.QueryRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.QueryRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.op_Equality(RepoDb.Requests.QueryRequest,RepoDb.Requests.QueryRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.QueryRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.QueryRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.QueryRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.op_Inequality(RepoDb.Requests.QueryRequest,RepoDb.Requests.QueryRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.QueryRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.QueryRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.QueryRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.QueryMultipleExtractor">
            <summary>
            A class used to extract the multiple resultsets of the query operation.
            </summary>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.#ctor(System.Data.Common.DbDataReader,System.Data.IDbConnection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be extracted.</param>
            <param name="connection">The used <see cref="T:System.Data.IDbConnection"/> object.</param>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Dispose">
            <summary>
            Disposes the current instance of <see cref="T:RepoDb.QueryMultipleExtractor"/>.
            </summary>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Extract``1">
            <summary>
            Extract the <see cref="T:System.Data.Common.DbDataReader"/> object into an enumerable of data entity objects.
            </summary>
            <typeparam name="TEntity">The type of data entity to be extracted.</typeparam>
            <returns>An enumerable of extracted data entity.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Scalar">
            <summary>
            Converts the first column of the first row of the <see cref="T:System.Data.Common.DbDataReader"/> to an object.
            </summary>
            <returns>An instance of extracted object as value result.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Scalar``1">
            <summary>
            Converts the first column of the first row of the <see cref="T:System.Data.Common.DbDataReader"/> to an object.
            </summary>
            <typeparam name="T">The target return type.</typeparam>
            <returns>An instance of extracted object as value result.</returns>
        </member>
        <member name="P:RepoDb.QueryMultipleExtractor.Position">
            <summary>
            Gets the position of the <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.NextResult">
            <summary>
            Advances the <see cref="T:System.Data.Common.DbDataReader"/> object to the next result.
            <returns>True if there are more result sets; otherwise false.</returns>
            </summary>
        </member>
        <member name="T:RepoDb.DbHelpers.SqlDbHelper">
            <summary>
            A helper class for database specially for the direct access. This class is only meant for SQL Server.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlDbHelper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbHelpers.SqlDbHelper"/> class.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlDbHelper.GetFields(System.String,System.String)">
            <summary>
            Gets the list of <see cref="T:RepoDb.DbField"/> of the table.
            </summary>
            <param name="connectionString">The connection string to connect to.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A list of <see cref="T:RepoDb.DbField"/> of the target table.</returns>
        </member>
        <member name="P:RepoDb.DbHelpers.SqlDbHelper.DbTypeResolver">
            <summary>
            Gets the type resolver used by this <see cref="T:RepoDb.DbHelpers.SqlDbHelper"/> instance.
            </summary>
        </member>
        <member name="T:RepoDb.CacheItem">
            <summary>
            An item used when caching an object in the repository object. This is the default class used by the <see cref="T:RepoDb.MemoryCache"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.CacheItem.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CacheItem"/> object.
            </summary>
            <param name="key">The key of the cache.</param>
            <param name="value">The value of the cache.</param>
        </member>
        <member name="M:RepoDb.CacheItem.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CacheItem"/> object.
            </summary>
            <param name="key">The key of the cache item.</param>
            <param name="value">The value of the cache item.</param>
            <param name="expiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.CacheItem.UpdateFrom(RepoDb.CacheItem)">
            <summary>
            Updates the value of the current item based from the source item.
            </summary>
            <param name="item">The source item.</param>
        </member>
        <member name="P:RepoDb.CacheItem.Key">
            <summary>
            Gets the key of the cache.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem.Value">
            <summary>
            Gets or sets the value of the cache.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem.CreatedDate">
            <summary>
            Gets the created timestamp of this cache item. By default, it is equals to the time
            of when this cache item object has been instantiated.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem.Expiration">
            <summary>
            Gets or sets the expiration date of this cache item.
            </summary>
        </member>
        <member name="M:RepoDb.CacheItem.IsExpired">
            <summary>
            Gets a value whether this cache item is expired.
            </summary>
            <returns>A boolean value that indicate whether this cache value is expired.</returns>
        </member>
        <member name="T:RepoDb.MemoryCache">
            <summary>
            An object used for caching the results of query operation. This is the default cache object used by the <see cref="T:RepoDb.DbRepository`1"/> and <see cref="T:RepoDb.BaseRepository`2"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.#ctor">
            <summary>
            Creates a new instance <see cref="T:RepoDb.MemoryCache"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.Add(System.String,System.Object,System.Int32,System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="key">The key to the cache.</param>
            <param name="value">The value of the cache.</param>
            <param name="expiration">The expiration in minutes of the cache item.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.Add(RepoDb.CacheItem,System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="item">The cache item to be added in the collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.Clear">
            <summary>
            Clears the collection of the cache.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.Contains(System.String)">
            <summary>
            Checks whether the key is present in the collection.
            </summary>
            <param name="key">The name of the key to be checked.</param>
            <returns>A boolean value that signifies the presence of the key from the collection.</returns>
        </member>
        <member name="M:RepoDb.MemoryCache.Get(System.String,System.Boolean)">
            <summary>
            Gets an object from the cache collection.
            </summary>
            <param name="key">The key of the cache object to be retrieved.</param>
            <returns>A cached item object from the cache collection based on the given key.</returns>
            <param name="throwException">Throws an exception if the item is not found.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.GetEnumerator">
            <summary>
            Gets the enumerator of the cache collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.MemoryCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of the cache collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.MemoryCache.Remove(System.String,System.Boolean)">
            <summary>
            Removes the item from the cache collection.
            </summary>
            <param name="key">The key of the item to be removed from the cache collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to remove an item.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.GetItem(System.String,System.Boolean)">
            <summary>
            Gets the cached item by key. This includes the expired cached item.
            </summary>
            <param name="key">The key of the cached item.</param>
            <returns>The cached item based on the given key.</returns>
            <param name="throwException">Throws an exception if the item is not found.</param>
        </member>
        <member name="T:RepoDb.Parameter">
            <summary>
            An object that holds the value of the field parameter.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Parameter"/> object.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:RepoDb.Parameter.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Parameter"/> object.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="prependUnderscore">The value to identify whether the underscope prefix will be prepended.</param>
        </member>
        <member name="P:RepoDb.Parameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.Parameter.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.PrependAnUnderscore">
            <summary>
            Prepend an underscore on the current parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.SetName(System.String)">
            <summary>
            Set the name of the parameter.
            </summary>
            <param name="name">The new name.</param>
        </member>
        <member name="M:RepoDb.Parameter.ToString">
            <summary>
            Stringify the current object. Will return the format of <b>Name (Value)</b> text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Parameter.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Parameter"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Parameter.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Parameter"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Parameter.Equals(RepoDb.Parameter)">
            <summary>
            Compares the <see cref="T:RepoDb.Parameter"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Parameter.op_Equality(RepoDb.Parameter,RepoDb.Parameter)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Parameter"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Parameter"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Parameter"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Parameter.op_Inequality(RepoDb.Parameter,RepoDb.Parameter)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Parameter"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Parameter"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Parameter"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.OrderField">
            <summary>
            An object that holds a field for ordering purposes.
            </summary>
        </member>
        <member name="M:RepoDb.OrderField.#ctor(System.String,RepoDb.Enumerations.Order)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.OrderField"/> object.
            </summary>
            <param name="name">The name of the field to be ordered.</param>
            <param name="order">The ordering direction of the field.</param>
        </member>
        <member name="P:RepoDb.OrderField.Name">
            <summary>
            Gets the quoted name of the order field.
            </summary>
        </member>
        <member name="P:RepoDb.OrderField.UnquotedName">
            <summary>
            Gets the unquoted name of the order field.
            </summary>
        </member>
        <member name="P:RepoDb.OrderField.Order">
            <summary>
            Gets the order direction of the field.
            </summary>
        </member>
        <member name="M:RepoDb.OrderField.GetOrderText">
            <summary>
            Gets the value of the <see cref="P:RepoDb.Attributes.TextAttribute.Text"/> thas was implemented on the ordering direction.
            </summary>
            <returns>The string containing the text value of the ordering direction.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Parse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.Enumerations.Order)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="order">The order of the property.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Ascending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Ascending"/> value.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Ascending"/> value.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Descending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Descending"/> value.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Descending"/> value.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Parse(System.Object)">
            <summary>
            Parse an object properties to be used for ordering. The object can have multiple properties for ordering and each property must have
            a value of <see cref="T:RepoDb.Enumerations.Order"/> enumeration.
            </summary>
            <param name="obj">An object to be parsed.</param>
            <returns>An enumerable of <see cref="T:RepoDb.OrderField"/> object that holds the ordering values for every field.</returns>
        </member>
        <member name="M:RepoDb.OrderField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.OrderField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.OrderField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Equals(RepoDb.OrderField)">
            <summary>
            Compares the <see cref="T:RepoDb.OrderField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.OrderField.op_Equality(RepoDb.OrderField,RepoDb.OrderField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.OrderField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.OrderField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.OrderField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.OrderField.op_Inequality(RepoDb.OrderField,RepoDb.OrderField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.OrderField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.OrderField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.OrderField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Field">
            <summary>
            An object that signifies as data field in the query statement.
            </summary>
        </member>
        <member name="M:RepoDb.Field.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:RepoDb.Field.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="type">The type of the field.</param>
        </member>
        <member name="P:RepoDb.Field.Name">
            <summary>
            Gets the quoted name of the field.
            </summary>
        </member>
        <member name="P:RepoDb.Field.UnquotedName">
            <summary>
            Gets the unquoted name of the field.
            </summary>
        </member>
        <member name="P:RepoDb.Field.Type">
            <summary>
            Gets the type of the field.
            </summary>
        </member>
        <member name="M:RepoDb.Field.ToString">
            <summary>
            Stringify the current field object.
            </summary>
            <returns>The string value equivalent to the name of the field.</returns>
        </member>
        <member name="M:RepoDb.Field.From(System.String[])">
            <summary>
            Creates an enumerable of <see cref="T:RepoDb.Field"/> objects that derived from the given array of string values.
            </summary>
            <param name="fields">The array of string values that signifies the name of the fields (for each item).</param>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse``1(``0)">
            <summary>
            Parses an object and creates an enumerable of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="entity">An object to be parsed.</param>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse(System.Object)">
            <summary>
            Parses an object and creates an enumerable of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="obj">An object to be parsed.</param>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Field"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Field.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Field"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Field.Equals(RepoDb.Field)">
            <summary>
            Compares the <see cref="T:RepoDb.Field"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Field.op_Equality(RepoDb.Field,RepoDb.Field)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Field"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Field"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Field.op_Inequality(RepoDb.Field,RepoDb.Field)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Field"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Field"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.QueryBuilder">
            <summary>
            An object used to compose a SQL Query Statement.
            </summary>
        </member>
        <member name="M:RepoDb.QueryBuilder.ToString">
            <summary>
            Stringify the current object.
            </summary>
            <returns>
            Returns a string that corresponds to the composed SQL Query Statement. It uses the <see cref="M:RepoDb.QueryBuilder.GetString"/>
            method as its underlying method call.
            </returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.GetString">
            <summary>
            Gets the string that corresponds to the composed SQL Query Statement.
            Starts at index 1 to drop the leading space.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Clear">
            <summary>
            Clears the current composed SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Space">
            <summary>
            Append a space to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.NewLine">
            <summary>
            Appends a line terminator to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.WriteText(System.String)">
            <summary>
            Writes a custom text to the SQL Query Statement.
            </summary>
            <param name="text">The text to be written.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Delete">
            <summary>
            Appends a word DELETE word to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.End">
            <summary>
            Appends a character ";" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Count">
            <summary>
            Appends a word COUNT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.CountBig">
            <summary>
            Appends a word COUNT_BIG to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldFrom(RepoDb.Field)">
            <summary>
            Appends a stringified fields to the SQL Query Statement.
            </summary>
            <param name="field">The list of fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsFrom``1">
            <summary>
            Appends a stringified fields to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Append a stringified fields to the SQL Query Statement.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndParametersFrom``1(System.Int32,System.String)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="index">The parameter index.</param>
            <param name="prefix">The prefix to the parameters.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndParametersFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="prefix">The prefix to the parameters.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndAliasFieldsFrom``1(System.String)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement with aliases.
            </summary>
            <param name="alias">The alias to be prepended for each field.</param>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndAliasFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement with aliases.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="alias">The alias to be prepended for each field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.AsAliasFieldsFrom``1(System.String)">
            <summary>
            Appends a stringified fields to the SQL Query Statement with aliases.
            </summary>
            <param name="alias">The alias to be prepended for each field.</param>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.AsAliasFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            Appends a stringified fields to the SQL Query Statement by command with aliases.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="alias">The alias to be prepended for each field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.From">
            <summary>
            Appends a word FROM to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.GroupByFrom(System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Appends a word GROUP BY and a stringified fields to the SQL Query Statement.
            </summary>
            <param name="fields">The fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.HavingCountFrom(RepoDb.QueryField,System.Int32,System.String)">
            <summary>
            Appends a word HAVING COUNT and a conditional field to the SQL Query Statement.
            </summary>
            <param name="queryField">The conditional field object used for composition.</param>
            <param name="index">The parameter index.</param>
            <param name="prefix">The prefix to the parameters.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Insert">
            <summary>
            Appends a word INSERT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.GroupBy">
            <summary>
            Appends a word GROUP BY to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.HavingCount">
            <summary>
            Appends a word HAVING COUNT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Into">
            <summary>
            Appends a word INTO to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Values">
            <summary>
            Appends a word VALUES to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OrderByFrom(System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String)">
            <summary>
            Appends a word ORDER BY and the stringified fields to the SQL Query Statement with aliases.
            </summary>
            <param name="orderBy">The list of order fields to be stringified.</param>
            <param name="alias">The aliases to be prepended for each field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.As(System.String)">
            <summary>
            Appends a word AS to the SQL Query Statement with alias.
            </summary>
            <param name="alias">The alias to be prepended.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.With">
            <summary>
            Appends a word WITH to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Set">
            <summary>
            Appends a word SET to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Join">
            <summary>
            Appends a word JOIN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.JoinQualifiersFrom(RepoDb.Field,System.String,System.String)">
            <summary>
            Appends a stringified field as a joined qualifier to the SQL Query Statement with left and right aliases.
            </summary>
            <param name="field">The field to be stringified.</param>
            <param name="leftAlias">The left alias.</param>
            <param name="rightAlias">The right alias.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Merge">
            <summary>
            Appends a word MERGE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Table">
            <summary>
            Appends a word TABLE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.TableNameFrom(System.String)">
            <summary>
            Appends the target name to the SQL Query Statement.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.TableNameFrom``1">
            <summary>
            Appends the mapped entity name to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersFrom``1(System.Int32,System.String)">
            <summary>
            Append the mapped properpties name to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="index">The parameter index.</param>
            <param name="prefix">The prefix to the parameters.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String)">
            <summary>
            Append the stringified field parameters to the SQL Query Statement.
            </summary>
            <param name="fields">The list of fields to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="prefix">The prefix to the parameters.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersAsFieldsFrom``1(System.Int32,System.String)">
            <summary>
            Append the stringified parameter as fields to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="index">The parameter index.</param>
            <param name="prefix">The prefix to the parameters.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersAsFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String)">
            <summary>
            Append the stringified parameter as fields to the SQL Query Statement.
            </summary>
            <param name="fields">The list of fields to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="prefix">The prefix to the parameters.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Select">
            <summary>
            Appends a word SELECT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Top">
            <summary>
            Appends a word TOP to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OrderBy">
            <summary>
            Appends a word ORDER BY to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Where">
            <summary>
            Appends a word WHERE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.TopFrom(System.Nullable{System.Int32})">
            <summary>
            Appends a word TOP and row number to the SQL Query Statement.
            </summary>
            <param name="rows">The row number to be appended.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Update">
            <summary>
            Appends a word UPDATE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Using">
            <summary>
            Appends a word USING to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.WhereFrom(RepoDb.QueryGroup)">
            <summary>
            Appends a word WHERE and the stringified values of the Query Group to the SQL Query Statement.
            </summary>
            <param name="queryGroup">The query group to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.RowNumber">
            <summary>
            Appends a word ROW_NUMBER to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Over">
            <summary>
            Appends a word OVER to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.And">
            <summary>
            Appends a word AND to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Or">
            <summary>
            Appends a word OR to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OpenParen">
            <summary>
            Appends a character "(" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.CloseParen">
            <summary>
            Appends a character ")" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.On">
            <summary>
            Appends a word ON to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.In">
            <summary>
            Appends a word IN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Between">
            <summary>
            Appends a word BETWEEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.When">
            <summary>
            Appends a word WHEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Not">
            <summary>
            Appends a word NOT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Matched">
            <summary>
            Appends a word MATCHED to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Then">
            <summary>
            Appends a word THEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Case">
            <summary>
            Appends a word CASE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Truncate">
            <summary>
            Appends a word TRUNCATE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.HintsFrom(System.String)">
            <summary>
            Appends the hints to the SQL Query Statement.
            </summary>
            <param name="hints">The hints to be appended.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Max">
            <summary>
            Appends a word MAX to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.MaxFrom(RepoDb.Field)">
            <summary>
            Appends a word MAX and the field to the SQL Query Statement, otherwise an empty string.
            </summary>
            <param name="field">The target field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Min">
            <summary>
            Appends a word MIN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.MinFrom(RepoDb.Field)">
            <summary>
            Appends a word MIN and the field to the SQL Query Statement, otherwise an empty string.
            </summary>
            <param name="field">The target field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Avg">
            <summary>
            Appends a word AVG to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.AvgFrom(RepoDb.Field)">
            <summary>
            Appends a word AVG and the field to the SQL Query Statement, otherwise an empty string.
            </summary>
            <param name="field">The target field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:RepoDb.QueryGroup">
            <summary>
            A widely-used object for defining the groupings for the query expression. This object is used by most of the repository operations
            to define the filtering and query expressions for the actual execution.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryGroup)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,RepoDb.QueryGroup)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.QueryGroup})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.QueryGroup)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroup">The child query groups to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            /// <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group seperation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group seperation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group seperation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryGroup})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group seperation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="P:RepoDb.QueryGroup.Conjunction">
            <summary>
            Gets the conjunction used by this object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.QueryFields">
            <summary>
            Gets the list of fields being grouped by this object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.QueryGroups">
            <summary>
            Gets the list of child query groups being grouped by this object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.IsNot">
            <summary>
            Gets the value whether the grouping is in opposite field-value state.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.PrependAnUnderscoreAtTheParameters">
            <summary>
            Prepend an underscore on every parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.SetIsNot(System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:RepoDb.QueryGroup.IsNot"/> property.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value the defines the <see cref="P:RepoDb.QueryGroup.IsNot"/> property.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.Fix">
            <summary>
            Fix the names of the <see cref="T:RepoDb.Parameter"/> on every <see cref="T:RepoDb.QueryField"/> (and on every child <see cref="T:RepoDb.QueryGroup"/>) of the current <see cref="T:RepoDb.QueryGroup"/>.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Reset">
            <summary>
            Reset the <see cref="T:RepoDb.QueryGroup"/> back to its default state (as is newly instantiated).
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.FixForQueryMultiple(RepoDb.QueryGroup[])">
            <summary>
            Fix the names of the parameters in every <see cref="T:RepoDb.QueryField"/> object of the target list of <see cref="T:RepoDb.QueryGroup"/>s.
            </summary>
            <param name="queryGroups">The list of query groups.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object containing all the fields.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.AsMappedObject(RepoDb.QueryGroupTypeMap[],System.Boolean)">
            <summary>
            Converts every <see cref="T:RepoDb.QueryGroup"/> object of the list of <see cref="T:RepoDb.QueryGroupTypeMap"/> into an <see cref="T:System.Object"/> 
            with all the child <see cref="T:RepoDb.QueryField"/>s as the property/value to that object. The value of every property of the created
            object will be an instance of the <see cref="T:RepoDb.CommandParameter"/> with the proper type, name and value.
            </summary>
            <param name="queryGroupTypeMaps">The list of <see cref="T:RepoDb.QueryGroupTypeMap"/> objects to be converted.</param>
            <param name="fixParameters">A boolean value whether to fix the parameter name before converting.</param>
            <returns>An instance of an object that contains all the definition of the converted underlying <see cref="P:RepoDb.QueryGroup.QueryFields"/>s.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetConjunctionText">
            <summary>
            Gets the text value of <see cref="T:RepoDb.Attributes.TextAttribute"/> implemented at the <see cref="P:RepoDb.QueryGroup.Conjunction"/> property value of this instance.
            </summary>
            <returns>A string instance containing the value of the <see cref="T:RepoDb.Attributes.TextAttribute"/> text property.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetString">
            <summary>
            Gets the stringified query expression format of the current instance. A formatted string for field-operation-parameter will be
            conjuncted by the value of the <see cref="P:RepoDb.QueryGroup.Conjunction"/> property.
            </summary>
            <returns>A stringified formatted-text of the current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetFields(System.Boolean)">
            <summary>
            Gets all the child <see cref="T:RepoDb.QueryField"/> objects associated on the current instance.
            </summary>
            <param name="traverse">Identify whether to explore all the children of the child <see cref="T:RepoDb.QueryGroup"/> objects.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.QueryField"/> objects.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Parses a customized query expression.
            </summary>
            <typeparam name="TEntity">The target entity type</typeparam>
            <param name="expression">The expression to be converted to a <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <returns>An instance of the <see cref="T:RepoDb.QueryGroup"/> object that contains the parsed query expression.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse(System.Object)">
            <summary>
            Parses a dynamic object and convert back the result to an instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="obj">The dynamic object to be parsed.</param>
            <returns>An instance of the <see cref="T:RepoDb.QueryGroup"/> with parsed properties and values.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.QueryGroup"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryGroup"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Equals(RepoDb.QueryGroup)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryGroup"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.op_Equality(RepoDb.QueryGroup,RepoDb.QueryGroup)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.QueryGroup"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.op_Inequality(RepoDb.QueryGroup,RepoDb.QueryGroup)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.QueryGroup"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.QueryField">
            <summary>
            A class used to define the a expression for all operations. It holds the instances of field (<see cref="P:RepoDb.QueryField.Field"/>),
            parameter (<see cref="T:RepoDb.QueryField"/>) and the target operation (<see cref="P:RepoDb.QueryField.Operation"/>) of the query expression.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="appendUnderscore">
            The value to identify whether the underscore prefix will be appended to the parameter name.
            </param>
        </member>
        <member name="P:RepoDb.QueryField.Field">
            <summary>
            Gets the associated field object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryField.Operation">
            <summary>
            Gets the operation used by this instance.
            </summary>
        </member>
        <member name="P:RepoDb.QueryField.Parameter">
            <summary>
            Gets the associated parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.PrependAnUnderscoreAtParameter">
            <summary>
            Prepend an underscore on the bound parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.Reset">
            <summary>
            Resets the <see cref="T:RepoDb.QueryField"/> back to its default state (as is newly instantiated).
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.GetOperationText">
            <summary>
            Gets the text value of <see cref="T:RepoDb.Attributes.TextAttribute"/> implemented at the <see cref="P:RepoDb.QueryField.Operation"/> property value of this instance.
            </summary>
            <returns>A string instance containing the value of the <see cref="T:RepoDb.Attributes.TextAttribute"/> text property.</returns>
        </member>
        <member name="M:RepoDb.QueryField.ToString">
            <summary>
            Stringify the current instance of this object. Will return the stringified format of field and parameter in combine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.Parse``1(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Parse an instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <typeparam name="TEntity">The target entity type</typeparam>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> to be parsed.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryField"/> object.</returns>
        </member>
        <member name="M:RepoDb.QueryField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.QueryField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.QueryField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.QueryField.Equals(RepoDb.QueryField)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryField.op_Equality(RepoDb.QueryField,RepoDb.QueryField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.QueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryField.op_Inequality(RepoDb.QueryField,RepoDb.QueryField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.QueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.CancellableTraceLog">
            <summary>
            A cancellable tracing log object used in the tracing operations. This class holds the cancellable operations for all tracing logs.
            </summary>
        </member>
        <member name="M:RepoDb.CancellableTraceLog.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CancellableTraceLog"/> object.
            </summary>
            <param name="statement">A SQL statement that was used in the trace operation.</param>
            <param name="parameter">An object that was used as a parameter in the operation.</param>
            <param name="result">A result of the operation.</param>
        </member>
        <member name="P:RepoDb.CancellableTraceLog.IsCancelled">
            <summary>
            Gets a value whether the operation is cancelled.
            </summary>
        </member>
        <member name="P:RepoDb.CancellableTraceLog.IsThrowException">
            <summary>
            Gets a value whether an exception will be thrown after the <see cref="M:RepoDb.CancellableTraceLog.Cancel(System.Boolean)"/> method was called.
            </summary>
        </member>
        <member name="M:RepoDb.CancellableTraceLog.Cancel(System.Boolean)">
            <summary>
            Cancel the current executing repository operation.
            </summary>
            <param name="throwException">If true, an exception will be thrown.</param>
        </member>
        <member name="T:RepoDb.ObjectConverter">
            <summary>
            A class used for converting an object.
            </summary>
        </member>
        <member name="M:RepoDb.ObjectConverter.DbNullToNull(System.Object)">
            <summary>
            Converts a value to null if the value is equals to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="value">The value to be checked for <see cref="F:System.DBNull.Value"/>.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:RepoDb.ObjectConverter.ToType``1(System.Object)">
            <summary>
            Converts a value to a target type if the value is equals to null or <see cref="F:System.DBNull.Value"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The value to be checked for <see cref="F:System.DBNull.Value"/>.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:RepoDb.SqlDbTypeToStringNameResolver">
            <summary>
            A class used to resolve the .NET CLR Types into its equivalent database string name.
            </summary>
        </member>
        <member name="M:RepoDb.SqlDbTypeToStringNameResolver.Resolve(System.Data.DbType)">
            <summary>
            Returns the equivalent <see cref="T:System.Data.DbType"/> of the .NET CLR Types.
            </summary>
            <param name="dbType">The type of the database.</param>
            <returns>The equivalent string name.</returns>
        </member>
        <member name="T:RepoDb.ClientTypeToSqlDbTypeResolver">
            <summary>
            A class used to resolve the .NET CLR Types into SQL Database Types.
            </summary>
        </member>
        <member name="M:RepoDb.ClientTypeToSqlDbTypeResolver.Resolve(System.Type)">
            <summary>
            Returns the equivalent <see cref="T:System.Data.DbType"/> of the .NET CLR Types.
            </summary>
            <param name="type">The .NET CLR Type.</param>
            <returns>The equivalent <see cref="T:System.Data.DbType"/> Type.</returns>
        </member>
        <member name="T:RepoDb.SqlDbTypeToClientTypeResolver">
            <summary>
            A class used to resolve the SQL Database Types into .NET CLR Types.
            </summary>
        </member>
        <member name="M:RepoDb.SqlDbTypeToClientTypeResolver.Resolve(System.String)">
            <summary>
            Returns the equivalent .NET CLR Types of the Database Type.
            </summary>
            <param name="dbType">The name of the database type.</param>
            <returns>The equivalent .NET CLR type.</returns>
        </member>
        <member name="T:RepoDb.SqlStatementBuilder">
            <summary>
            A class used to build a SQL Statement for SQL Server. This is the default statement builder used by the library.
            </summary>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.SqlStatementBuilder"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateBatchQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for batch query operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to query.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for batch query operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateCount(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for count operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for count operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateCountAll(RepoDb.QueryBuilder,System.String,System.String)">
            <summary>
            Creates a SQL Statement for count-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for count-all operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateDelete(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for delete operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <returns>A sql statement for delete operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateDeleteAll(RepoDb.QueryBuilder,System.String)">
            <summary>
            Creates a SQL Statement for delete-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A sql statement for delete-all operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateInsert(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for insert operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="primaryField">The primary field from the database.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateInsert(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for insert operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateInsertAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for insert-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateMerge(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for merge operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields.</param>
            <param name="primaryField">The primary field from the database.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateMerge(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for merge operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a SQL Statement for query operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateQueryAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String)">
            <summary>
            Creates a SQL Statement for query-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="hints">The table hints to be used. See <see cref="T:RepoDb.SqlTableHints"/> class.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateTruncate(RepoDb.QueryBuilder,System.String)">
            <summary>
            Creates a SQL Statement for truncate operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A sql statement for truncate operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateUpdate(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for inline-update operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="where">The query expression.</param>
            <param name="primaryField">The primary field from the database.</param>
            <returns>A sql statement for update operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.CreateUpdate(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Creates a SQL Statement for inline-update operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="where">The query expression.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <returns>A sql statement for update operation.</returns>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.GuardTableName(System.String)">
            <summary>
            Throws an exception if the table name is null or empty.
            </summary>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.GuardPrimary(RepoDb.DbField)">
            <summary>
            Throws an exception if the primary field is not really a primary field.
            </summary>
            <param name="field">The instance of the primary field.</param>
        </member>
        <member name="M:RepoDb.SqlStatementBuilder.GuardIdentity(RepoDb.DbField)">
            <summary>
            Throws an exception if the identity field is not really an identity field.
            </summary>
            <param name="field">The instance of the identity field.</param>
        </member>
        <member name="T:RepoDb.StatementBuilderMapper">
            <summary>
            A class that is used to map the type of <see cref="T:System.Data.Common.DbConnection"/> into an instance of <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Guard(System.Type)">
            <summary>
            Throws an exception if the type is not a sublcass of type <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Get``1">
            <summary>
            Gets the mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> from the type of <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.Common.DbConnection"/>.</typeparam>
            <returns>An instance of <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> defined on the mapping.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Get(System.Type)">
            <summary>
            Gets the mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> from the type of <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="type">The type of <see cref="T:System.Data.Common.DbConnection"/>.</param>
            <returns>An instance of <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> defined on the mapping.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Add(System.Type,RepoDb.Interfaces.IStatementBuilder,System.Boolean)">
            <summary>
            Adds a mapping between the type of <see cref="T:System.Data.Common.DbConnection"/> and an instance of <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object.
            </summary>
            <param name="type">The type of <see cref="T:System.Data.Common.DbConnection"/> object.</param>
            <param name="statementBuilder">The statement builder to be mapped.</param>
            <param name="override">Set to true if to override the existing mapping, otherwise an exception will be thrown if the mapping is already present.</param>
        </member>
        <member name="T:RepoDb.SqlTableHints">
            <summary>
            A class that contains the SQL Server table hints (query optimizers) when querying a record. See Microsoft documentation <see href="https://docs.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-table?view=sql-server-2017">here</see>.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.NoExpand">
            <summary>
            Specifies that any indexed views are not expanded to access underlying tables when the query optimizer processes the query.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.ForceSeek">
            <summary>
            The query optimizer considers only index seek operations to access the table or view through any relevant index.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.ForceScan">
            <summary>
            Specifies that the query optimizer use only an index scan operation as the access path to the referenced table or view. 
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.HoldLock">
            <summary>
            HOLDLOCK applies only to the table or view for which it is specified and only for the duration of the transaction 
            defined by the statement that it is used in. Is equivalent to SERIALIZABLE.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.NoLock">
            <summary>
            Specifies that dirty reads are allowed. No shared locks are issued to prevent other transactions from modifying data 
            read by the current transaction, and exclusive locks set by other transactions do not block the current transaction 
            from reading the locked data. Is equivalent to READUNCOMMITTED.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.NoWait">
            <summary>
            Instructs the Database Engine to return a message as soon as a lock is encountered on the table.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.PagLock">
            <summary>
            Takes page locks either where individual locks are ordinarily taken on rows or keys, or where a single table lock is ordinarily taken.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.ReadCommitted">
            <summary>
            Specifies that read operations comply with the rules for the READ COMMITTED isolation level by using either locking or row versioning. 
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.ReadCommittedLock">
            <summary>
            Specifies that read operations comply with the rules for the READ COMMITTED isolation level by using locking.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.ReadPast">
            <summary>
            Specifies that the Database Engine not read rows that are locked by other transactions.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.ReadUncommitted">
            <summary>
            Specifies that dirty reads are allowed. No shared locks are issued to prevent other transactions from modifying data 
            read by the current transaction, and exclusive locks set by other transactions do not block the current transaction 
            from reading the locked data.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.RepeatableRead">
            <summary>
            Specifies that a scan is performed with the same locking semantics as a transaction running at REPEATABLE READ isolation level.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.RowLock">
            <summary>
            Specifies that row locks are taken when page or table locks are ordinarily taken. When specified in transactions operating at the SNAPSHOT 
            isolation level, row locks are not taken unless ROWLOCK is combined with other table hints that require locks, such as UPDLOCK and HOLDLOCK.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.Serializable">
            <summary>
            Makes shared locks more restrictive by holding them until a transaction is completed, instead of releasing the 
            shared lock as soon as the required table or data page is no longer needed, whether the transaction has been completed or not. The scan is 
            performed with the same semantics as a transaction running at the SERIALIZABLE isolation level. Is equivalent to HOLDLOCK.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.Snapshot">
            <summary>
            The memory-optimized table is accessed under SNAPSHOT isolation. SNAPSHOT can only be used with memory-optimized tables (not with disk-based tables).
            Applies to: SQL Server 2014 (12.x) through SQL Server 2017.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.TabLock">
            <summary>
            Specifies that the acquired lock is applied at the table level. The type of lock that is acquired depends on the statement being executed.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.TabLockX">
            <summary>
            Specifies that an exclusive lock is taken on the table.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.UpdLock">
            <summary>
            Specifies that update locks are to be taken and held until the transaction completes.
            </summary>
        </member>
        <member name="F:RepoDb.SqlTableHints.XLock">
            <summary>
            Specifies that exclusive locks are to be taken and held until the transaction completes.
            </summary>
        </member>
        <member name="T:RepoDb.TraceLog">
            <summary>
            A tracing log object used in the tracing operations.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Result">
            <summary>
            Gets the actual result of the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Parameter">
            <summary>
            Gets or sets the parameter object used on the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Statement">
            <summary>
            Gets or sets the SQL Statement used on the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.ExecutionTime">
            <summary>
            Gets the actual length of the operation execution.
            </summary>
        </member>
        <member name="T:RepoDb.TypeMapItem">
            <summary>
            A type mapping object that holds the mapping between the .NET CLR Types and database types.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapItem.#ctor(System.Type,System.Data.DbType)">
            <summary>
            Creates a a new instance of <see cref="T:RepoDb.TypeMapItem"/> object.
            </summary>
            <param name="type">The .NET CLR Type to be mapped.</param>
            <param name="dbType">The database type to map (typeof <see cref="P:RepoDb.TypeMapItem.DbType"/>).</param>
        </member>
        <member name="P:RepoDb.TypeMapItem.Type">
            <summary>
            Gets the .NET CLR Type used for mapping.
            </summary>
        </member>
        <member name="P:RepoDb.TypeMapItem.DbType">
            <summary>
            Gets the database type used for mapping.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapItem.SetDbType(System.Data.DbType)">
            <summary>
            Internally sets the value of the <see cref="P:RepoDb.TypeMapItem.DbType"/> property.
            </summary>
            <param name="dbType">The value of the <see cref="P:RepoDb.TypeMapItem.DbType"/>.</param>
        </member>
        <member name="T:RepoDb.TypeMapper">
            <summary>
            A static class used to map the .NET CLR Types into database types.
            </summary>
        </member>
        <member name="P:RepoDb.TypeMapper.ConversionType">
            <summary>
            Gets or sets the conversion type when converting the instance of <see cref="T:System.Data.Common.DbDataReader"/> object into its destination .NET CLR types.
            The default value is <see cref="F:RepoDb.Enumerations.ConversionType.Default"/>.
            </summary>
        </member>
        <member name="P:RepoDb.TypeMapper.TypeMaps">
            <summary>
            Gets the list of type-mapping objects.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapper.Map(System.Type,System.Data.DbType)">
            <summary>
            Adds a mapping between .NET CLR Type and database type.
            </summary>
            <param name="type">The .NET CLR Type to be mapped.</param>
            <param name="dbType">The database type where to map the .NET CLR Type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Map(System.Type,System.Data.DbType,System.Boolean)">
            <summary>
            Adds a mapping between .NET CLR Type and database type.
            </summary>
            <param name="type">The .NET CLR Type to be mapped.</param>
            <param name="dbType">The database type where to map the .NET CLR Type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Map(RepoDb.TypeMapItem)">
            <summary>
            Adds a mapping between .NET CLR Type and database type.
            </summary>
            <param name="item">The instance of type-mapping object that holds the mapping of .NET CLR Type and database type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Map(RepoDb.TypeMapItem,System.Boolean)">
            <summary>
            Adds a mapping between .NET CLR Type and database type.
            </summary>
            <param name="item">The instance of type-mapping object that holds the mapping of .NET CLR Type and database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Get(System.Type)">
            <summary>
            Gets the instance of type-mapping object that holds the mapping of .NET CLR Type and database type.
            </summary>
            <param name="type">The .NET CLR Type used for mapping.</param>
            <returns>The instance of type-mapping object that holds the mapping of .NET CLR Type and database type.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Get``1">
            <summary>
            Gets the instance of type-mapping object that holds the mapping of .NET CLR Type and database type.
            </summary>
            <typeparam name="T">The dynamic .NET CLR Type used for mapping.</typeparam>
            <returns>The instance of type-mapping object that holds the mapping of .NET CLR Type and database type.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Unmap(System.Type)">
            <summary>
            Removes a mapping of targetted .NET CLR Type from the collection.
            </summary>
            <param name="type">The .NET CLR Type mapping to be removed.</param>
        </member>
    </members>
</doc>
